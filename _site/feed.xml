<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeShurrik</title>
    <description>shurrik`s blog</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 20 Aug 2019 16:02:46 +0800</pubDate>
    <lastBuildDate>Tue, 20 Aug 2019 16:02:46 +0800</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Linux namespace</title>
        <description>&lt;p&gt;之前做过一段时间 docker 相关的工作，只能算熟悉相关命令，很多原理都似是而非。面试的时候被问过一个简单的问题：容器间资源的隔离是怎么实现的？当时只知道是靠 namespace ，但是具体实现不清楚。&lt;/p&gt;

&lt;p&gt;最近深入看了下 Linux namespace ，通过 network namespace 实验了 docker 的 bridge 网络。&lt;/p&gt;

&lt;p&gt;在每个容器中，我们都可以看到文件系统，网卡等资源，这些资源看上去是容器自己的。拿网卡来说，每个容器都会认为自己有一块独立的网卡，即使 host 上只有一块物理网卡。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;namespace 就是 Linux 内核用来隔离内核资源的方式。&lt;/strong&gt;通过 namespace 可以让一些进程只能看到与自己相关的一部分资源，而另外一些进程也只能看到与它们自己相关的资源，这两拨进程根本就感觉不到对方的存在。具体的实现方式是把一个或多个进程的相关资源指定在同一个 namespace 中。&lt;/p&gt;

&lt;p&gt;Linux namespaces 是对全局系统资源的一种封装隔离，使得处于不同 namespace 的进程拥有独立的全局系统资源，改变一个 namespace 中的系统资源只会影响当前 namespace 里的进程，对其他 namespace 中的进程没有影响。&lt;/p&gt;

&lt;p&gt;我们可以从 docker 实现者的角度考虑该如何实现一个资源隔离的容器。比如是不是可以通过 chroot 命令切换根目录的挂载点，从而隔离文件系统。为了在分布式的环境下进行通信和定位，容器必须要有独立的 IP、端口和路由等，这就需要对网络进行隔离。同时容器还需要一个独立的主机名以便在网络中标识自己。接下来还需要进程间的通信、用户权限等的隔离。最后，运行在容器中的应用需要有进程号(PID)，自然也需要与宿主机中的 PID 进行隔离。也就是说这六种隔离能力是实现一个容器的基础，让我们看看 linux 内核的 namespace 特性为我们提供了什么样的隔离能力：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63321909-b0a84e00-c354-11e9-8179-ee7aca298e6e.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里我们就深入了解下network namespace：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Network namespace 在逻辑上是网络堆栈的一个副本，它有自己的路由、防火墙规则和网络设备。&lt;/strong&gt; 默认情况下，子进程继承其父进程的 network namespace。也就是说，如果不显式创建新的 network namespace，所有进程都从 init 进程继承相同的默认 network namespace。&lt;/p&gt;

&lt;p&gt;每个新创建的 network namespace 默认有一个本地环回接口 lo，除此之外，所有的其他网络设备(物理/虚拟网络接口，网桥等)只能属于一个 network namespace。每个 socket 也只能属于一个 network namespace。&lt;/p&gt;

&lt;h3 id=&quot;ip-netns-命令&quot;&gt;ip netns 命令&lt;/h3&gt;
&lt;p&gt;ip netns 命令用来管理 network namespace。本文将使用 ip netns 命令来创建和操作 network namespace。(最近发现&lt;code class=&quot;highlighter-rouge&quot;&gt;ip&lt;/code&gt;比&lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;好用多了)&lt;/p&gt;

&lt;h3 id=&quot;创建-network-namespace&quot;&gt;创建 network namespace&lt;/h3&gt;

&lt;p&gt;先查看一下默认的 network namespace 的 ID：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63323053-683e5f80-c357-11e9-9f1d-d382e7f39ea7.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后通过 ip netns add 命令创建名为 mynet 的 network namespace：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63323179-ba7f8080-c357-11e9-8642-60d728246a39.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从上图可以看出，在名为 mynet 的 network namespace 创建成功后，/var/run/netns 目录下多了一个名为 mynet 文件。ip netns exec 子命令可以在对应的 network namespace 中执行命令，下面我们就通过它在 mynet network namespace 中创建一个 bash 进程，并查看 network namespace 的 ID：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63324843-7f7f4c00-c35b-11e9-9e91-91fd2fa52841.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一个完全不同的 network namespace ID，而且默认shell也变了，说明当前的 bash 进程运行在一个隔离的 network 环境中。接下来让我们看看新的 network namespace 中都有什么：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63324922-ac336380-c35b-11e9-9767-308b536ef4ec.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每个新创建的 network namespace 默认有一个本地环回接口 lo，并且这个接口是处于关闭状态的。下面我们就启动这个接口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63324996-d6852100-c35b-11e9-981f-d95726142cec.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;启动 lo 接口后我们可以看到其 IP 地址，并且能够 ping 通。&lt;/p&gt;

&lt;h3 id=&quot;在两个-network-namespace-之间通信&quot;&gt;在两个 network namespace 之间通信&lt;/h3&gt;

&lt;p&gt;network namespace 之间是相互隔离的，我们可以使用 veth 设备把两个 network namespace 连接起来进行通信。veth 设备是虚拟的以太网设备。它们可以充当 network namespace 之间的通道，也可以作为独立的网络设备使用。&lt;strong&gt;veth 设备总是被成对的创建，并且这一对设备总是连接在一起的，所以一般把称之为 veth pair。&lt;/strong&gt;需要注意的是，veth pair 无法单独存在，删除其中一个，另一个也会自动消失。接下来的示例我们就演示如何使用 veth pair 在两个 network namespace 直接通信。示例中我们使用 ip link 命令来创建和管理 veth pair。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一步，先创建两个 network namespace net0 和 net1&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns add net0
ip netns add net1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;第二步，创建一对命名的 veth 设备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;默认情况下会自动为 veth pair 生成名称，这里为了易于辨识，我们在创建时指定 veth pair 的名称：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add vethmother &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;veth peer name vethfather
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63325674-34fecf00-c35d-11e9-8a1e-09443031db75.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图所示，veth pair 在主机上表现为两个网卡。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三步，把这一对 veth pair 分别放到 network namespace net0 和 net1中&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethmother netns net0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethfather netns net1
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63325799-71322f80-c35d-11e9-9403-4b6ab5d95c77.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;查看 net0 和 net1 中的网络资源，发现各自多了一个网卡，也就是 veth 设备的两个端点。注意，当我们把 veth pair 分配到 network namespace 中后，在主机上就看不到它们了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第四步，给这些 veth pair 分配 IP 并启用它们&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethmother up
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr add 10.0.1.1/24 dev vethmother
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip route
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;vethfather up
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip addr add 10.0.1.2/24 dev vethfather
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net1 ip route
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;下面通过 ping 命令来验证两个 network namespace 是否可以通信：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ping &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 3 10.0.1.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326000-e998f080-c35d-11e9-816b-03b39bff47b2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;至此，我们构建了一个如下结构的虚拟网络：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326036-f9b0d000-c35d-11e9-9b76-2670ab5c18f2.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;通过-bridge-连接-network-namespace&quot;&gt;通过 bridge 连接 network namespace&lt;/h3&gt;

&lt;p&gt;虽然 veth pair 可以实现两个 network namespace 之间的通信，但是当需要在多个 network namespace 之间通信的时候，光靠 veth pair 就不行了。我们可以使用 Linux 提供的虚拟交换机，来完成这样的功能。下面的示例演示如何通过虚拟交换机(这里就是一个虚拟网桥)连接多个 network namespace。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一步，先添加一个叫 mybridge0 的网桥&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add mybridge0 &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;bridge
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev mybridge0 up
ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;对主机来说其实就是新添加了一个网络接口。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二步，创建 network namespace 和 veth 设备&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip netns add net0
ip &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;add veth0 &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;veth peer name veth0p 

ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0p netns net0
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0p name eth0
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr add 10.0.1.1/24 dev eth0
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev eth0 up
ip netns &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;net0 ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326429-cfabdd80-c35e-11e9-90a8-a41327b7c57a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图显示 network namespace net0 中的 eth0 网卡已经启动了。下面把 veth 设备的另一端连接到网桥 mybridge0 上：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0 master mybridge0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev veth0 up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;第三步，重复第二步创建 net1 和 net2，并连接到网桥&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;给 mybridge0 设置 IP：&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev mybridge0 down
ip addr add 10.0.1.254/24 dev mybridge0
ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;dev mybridge0 up
ip addr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过 bridge link 命令查看网桥的信息如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63326917-c8390400-c35f-11e9-8b5c-3700bab628b5.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这时就可以在不同的 network namespace 之间通信了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63329053-d38e2e80-c363-11e9-9ef5-02199d26cd5a.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们创建的网络拓扑结构如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/63327204-57461c00-c360-11e9-8340-7d948ff3d0d8.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;通过 network namespace 可以创建相互独立的网络栈，从而实现网络的隔离。其中 network namespace 之间通过 bridge 通信的方式已经与 docker 网络的 bridge 模式非常类似了，剩下的不过就是开启ip.forward，添加NAT规则等等。&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Aug 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-08-20/Linux-namespace/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-08-20/Linux-namespace/</guid>
        
        <category>容器</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>深入理解UDP</title>
        <description>&lt;p&gt;最近在工作中遇到一个 docker 容器下 UDP 协议网络不通的问题，困扰了很久，也比较有意思，某一天等红绿灯的时候突然茅塞顿开，所以再此记录一下。&lt;/p&gt;

&lt;p&gt;我们有个应用是 UDP 协议的，部署上去发现无法工作，但是换成 TCP 协议是可以的（应用同时支持 UDP、TCP 协议，切换成 TCP 模式发现一切正常）。虽然换成 TCP 能解决问题，但是我们还是想知道到底 UDP 协议为什么会出现这个问题，以防止后面其他 UDP 应用会有异常。&lt;/p&gt;

&lt;p&gt;这个问题抽象出来是这样的：如果有 UDP 服务运行在主机上，并且监听在 0.0.0.0 地址（也就是所有的 ip 地址），从运行在 docker bridge 网络的容器运行客户端访问服务，两者通信有问题。&lt;/p&gt;

&lt;p&gt;注意以上的的限制条件，通过测试，我们发现下来几种情况都是正常的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;使用 TCP 协议没有这个问题，这个已经说过了&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果 UDP 服务器监听在 eth0 IP 地址上也不会出现这个问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;并不是所有的应用都有这个问题，我们的 DNS（dnsmasq + kubeDNS） 也是同样的部署方式，但是功能都正常&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个问题在 docker 上也有 issue 记录：&lt;a href=&quot;https://github.com/moby/moby/issues/15127&quot;&gt;https://github.com/moby/moby/issues/15127&lt;/a&gt; ，但是目前并没有很好的解决方案。&lt;/p&gt;

&lt;p&gt;这篇文章就分析一下出现这个问题的原因。&lt;/p&gt;

&lt;h2 id=&quot;问题重现&quot;&gt;问题重现&lt;/h2&gt;

&lt;p&gt;这个问题很容易重现，我的实验是在 red hat7.5 下用 &lt;code class=&quot;highlighter-rouge&quot;&gt;netcat&lt;/code&gt; 命令完成的，其他系统应该类似。在主机上通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; 监听 5678 端口，然后在容器里使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nc&lt;/code&gt; 发数据。第一个报文是能发送出去的，但是以后的报文虽然在网络上能看到，但是对方无法接收。&lt;/p&gt;

&lt;p&gt;在主机上运行 nc UDP 服务器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# nc -ul 5678&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后随便启动一个容器，运行客户端&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/ # nc -u 192.168.106.242 5678&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;nc 的通信是双方的，不管对方输入什么字符，回车后对方就能立即收到。但是在这个模式下，客户端第一次输入对方能够收到，后续的报文对方都收不到。&lt;/p&gt;

&lt;p&gt;在这个实验中，容器使用的是 docker 的默认网络，容器的 ip 是 172.17.0.2，通过 veth pair（图中没有显示）连接到虚拟网桥 docker0（ip 地址为 172.17.0.1），主机本身的网络为 eth0，其 ip 地址为 192.168.106.242&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 172.17.0.2
+----------+
 |   eth0   |
+----+-----+
     |
     |
     |
     |
+----+-----+          +----------+
 | docker0  |           |  eth0    |
+----------+          +----------+
172.17.0.1            192.168.106.242
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tcpdump-抓包&quot;&gt;tcpdump 抓包&lt;/h2&gt;

&lt;p&gt;遇到这种疑难杂症，第一个想到的抓包，我们需要在 docker0 上抓包，因为这是报文必经过的地方。通过过滤容器的 ip 地址，很容易找到感兴趣的报文：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# tcpdump -i docker0 -n host 172.17.0.2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;为了模拟多数应用一问一答的通信方式，我们一共发送三个报文，并用 tcpdump 抓取 docker0 接口上的报文：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;客户端先向服务器端发送 hello&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务器端回复 world&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端继续发送 hi 消息&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;抓包的结果如下，可以发现第一个报文发送出去没有任何问题（因为 UDP 是没有 ACK 报文的，所以客户端无法知道对方有没有收到，这里说的没有问题是指没有对应的 ICMP 报文），但是第二个报文从服务端发送的报文，对方会返回一个 ICMP 告诉端口 44182 不可达；第三个报文从客户端发送的报文也是如此。以后的报文情况类似，双方再也无法进行通信了。&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpdump: verbose output suppressed, use &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; or &lt;span class=&quot;nt&quot;&gt;-vv&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;full protocol decode
listening on docker0, link-type EN10MB &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ethernet&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, capture size 262144 bytes
14:48:42.514345 IP 172.17.0.2.44182 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 192.168.106.242.rrac: UDP, length 6
14:48:47.523098 ARP, Request who-has 172.17.0.1 tell 172.17.0.2, length 28
14:48:47.523144 ARP, Reply 172.17.0.1 is-at 02:42:0c:b4:3f:ee, length 28
14:48:52.325946 IP 172.17.0.1.rrac &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 172.17.0.2.44182: UDP, length 6
14:48:52.325994 IP 172.17.0.2 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 172.17.0.1: ICMP 172.17.0.2 udp port 44182 unreachable, length 42
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;问题原因&quot;&gt;问题原因&lt;/h2&gt;

&lt;p&gt;从网络报文的分析中可以看到服务端返回的报文源地址不是我们预想的 eth0 地址，而是 docker0 的地址，而客户端直接认为该报文是非法的，返回了 ICMP 的报文给对方。&lt;/p&gt;

&lt;p&gt;那么问题的原因也可以分为两个部分：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;为什么应答报文源地址是错误的？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;既然 UDP 是无状态的，内核怎么判断源地址不正确呢？&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;主机多网络接口-udp-源地址选择问题&quot;&gt;主机多网络接口 UDP 源地址选择问题&lt;/h2&gt;

&lt;p&gt;第一个问题的关键词是：UDP 和多网络接口。因为如果主机上只有一个网络接口，发出去的报文源地址一定不会有错；而我们也测试过 TCP 协议是能够处理这个问题的。&lt;/p&gt;

&lt;p&gt;通过搜索，发现这确实是个已知的问题。在 «TCP/IP详解» 这本书中，已经描述过这个问题，下面是对应的内容：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个问题可以归结为一句话：UDP 在多网卡的情况下，可能会发生服务器端源地址不对的情况，这是内核选路的结果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么 UDP 和 TCP 有不同的选路逻辑呢？因为 UDP 是无状态的协议，内核不会保存连接双方的信息，因此每次发送的报文都认为是独立的，socket 层每次发送报文默认情况不会指明要使用的源地址，只是说明对方地址。因此，内核会为要发出去的报文选择一个 ip，这通常都是报文路由要经过的设备 ip 地址。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;del&gt;既然这样，聪明的你可能要问为什么 dnsmasq 服务没有这个问题呢？这个就涉及到 socket 系统调用问题了，我也不会&lt;/del&gt;&lt;/p&gt;

&lt;h2 id=&quot;关于-udp-连接的疑惑&quot;&gt;关于 UDP 连接的疑惑&lt;/h2&gt;

&lt;p&gt;第二个问题是：为什么内核会把源地址和之前不同的报文丢弃？认为它是非法的？因为我们前面已经说过，UDP 协议是无连接的，默认情况下 socket 也不会保存双方连接的信息。即使服务端发送报文的源地址有误，只要对方能正常接收并处理，也不会导致网络不通。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;那是因为 conntrack，内核的 netfilter 模块会保存连接的状态(也就是俗称的 iptables )，并作为防火墙设置的依据。其实和状态防火墙一个道理，它保存的 UDP 连接，只是简单记录了主机上本地 ip 和端口，和对端 ip 和端口，并不会保存更多的内容。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;p&gt;知道了问题的原因，解决方案也就很容易找到。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;使用 TCP 协议：如果服务端和客户端使用 TCP 协议进行通信，它们之间的网络是正常的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;监听在特定网卡：&lt;code class=&quot;highlighter-rouge&quot;&gt;# nc -ul 192.168.106.242 5678&lt;/code&gt;
这种情况下，服务端和客户端也能正常通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;del&gt;改动应用程序实现&lt;/del&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 17 Jul 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-07-17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3UDP/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-07-17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3UDP/</guid>
        
        <category>容器</category>
        
        
        <category>网络</category>
        
      </item>
    
      <item>
        <title>Docker部署Calico网络</title>
        <description>&lt;p&gt;　　今天交流了NSX-T和K8S的集成，赶紧了解了一下原生开源的Calico网络。&lt;/p&gt;

&lt;p&gt;　　Calico是一个纯三层的虚拟网络方案，Calico为每个容器分配一个IP，每个host都是router，host之间采用了BGP协议发布路由，把不同host的容器连接起来。与VxLAN不同的是，Calico不对数据包做额外封装，不需要NAT和端口映射，扩展性和性能都很好。&lt;/p&gt;

&lt;h2 id=&quot;实验环境&quot;&gt;实验环境&lt;/h2&gt;

&lt;p&gt;Calico依赖etcd在不同主机间共享和交换信息，存储Calico网络状态。我们将在host 192.168.33.10上运行etcd。&lt;/p&gt;

&lt;p&gt;Calico网络中的每个主机都需要运行Calico组件，提供容器interface管理、动态路由、动态ACL、报告状态等功能。&lt;/p&gt;

&lt;p&gt;将就了之前搭的vagrant，实验环境如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/59015243-1f572e80-8871-11e9-9c7b-e5493bb6cb16.jpg&quot; alt=&quot;calico1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;首先安装etcd&quot;&gt;首先安装etcd&lt;/h2&gt;

&lt;p&gt;在192.168.33.10主机上安装etcd:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yum install -y etcd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改etcd配置文件：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@master etc]# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/etcd.conf 
&lt;span class=&quot;c&quot;&gt;#[Member]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_CORS=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_DATA_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/default.etcd&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_WAL_DIR=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_LISTEN_PEER_URLS=&quot;http://localhost:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://192.168.33.10:2379&quot;&lt;/span&gt;
...
&lt;span class=&quot;c&quot;&gt;#[Clustering]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;http://localhost:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ADVERTISE_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://192.168.33.10:2379&quot;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启动etcd服务&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start etcd &amp;amp;&amp;amp; systemctl enable etcd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改docker配置文件连接etcd:&lt;/p&gt;

&lt;p&gt;修改 node1 和 node2 的 Docker daemon 配置文件/etc/docker/daemon.json&lt;/p&gt;

&lt;p&gt;连接 etcd：–cluster-store=etcd://192.168.33.10:2379&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/docker/daemon.json 
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;registry-mirrors&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://x3h8v36l.mirror.aliyuncs.com&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;cluster-store&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;etcd://192.168.33.10:2379&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启 Docker daemon&lt;code class=&quot;highlighter-rouge&quot;&gt; systemctl daemon-reload &amp;amp;&amp;amp; systemctl restart docker.service&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;部署calicoctl&quot;&gt;部署calicoctl&lt;/h2&gt;

&lt;p&gt;官方参考文档： https://docs.projectcalico.org/v2.6/getting-started/docker/installation/manual&lt;/p&gt;

&lt;p&gt;在node1和node2上下载calicoctl并运行calico容器:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# wget &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /usr/local/bin/calicoctl https://github.com/projectcalico/calicoctl/releases/download/v1.6.5/calicoctl
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# &lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; +x /usr/local/bin/calicoctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建calico配置文件:&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /etc/calico/
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# vim /etc/calico/calicoctl.cfg
apiVersion: v1
kind: calicoApiConfig
metadata:
spec:
  datastoreType: &lt;span class=&quot;s2&quot;&gt;&quot;etcdv2&quot;&lt;/span&gt;
  etcdEndpoints: &lt;span class=&quot;s2&quot;&gt;&quot;http://192.168.33.10:2379&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;分别在两个节点上创建calico容器，执行后会自动下载calico镜像并运行容器:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# calicoctl node run &lt;span class=&quot;nt&quot;&gt;--node-image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;quay.io/calico/node:v2.6.12 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/calico/calicoctl.cfg
Running &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to load modules: modprobe &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; xt_set ip6_tables
Enabling IPv4 forwarding
Enabling IPv6 forwarding
Increasing conntrack limit
Removing old calico-node container &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Running the following &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;to start calico-node:

docker run &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;calico-node &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;NODENAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node1 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CALICO_NETWORKING_BACKEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bird &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;CALICO_LIBNETWORK_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ETCD_ENDPOINTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://192.168.33.10:2379 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/log/calico:/var/log/calico &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/calico:/var/run/calico &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /lib/modules:/lib/modules &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /run:/run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /run/docker/plugins:/run/docker/plugins &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock quay.io/calico/node:v2.6.12

Image may take a short &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;to download &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;it is not available locally.
Container started, checking progress logs.

2019-06-06 07:16:41.433 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 173: Early log level &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to info
2019-06-06 07:16:41.433 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] client.go 202: Loading config from environment
2019-06-06 07:16:41.434 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 83: Skipping datastore connection &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;2019-06-06 07:16:41.439 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 259: Building new node resource &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node1&quot;&lt;/span&gt;
2019-06-06 07:16:41.439 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 273: Initialise BGP data
2019-06-06 07:16:41.441 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 467: Using autodetected IPv4 address on interface eth1: 192.168.33.11/24
2019-06-06 07:16:41.441 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 338: Node IPv4 changed, will check &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;conflicts
2019-06-06 07:16:41.444 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] etcd.go 430: Error enumerating host directories &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100: Key not found &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/calico&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;11]
2019-06-06 07:16:41.444 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 530: No AS number configured on node resource, using global value
2019-06-06 07:16:41.448 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] etcd.go 105: Ready flag is now &lt;span class=&quot;nb&quot;&gt;set
&lt;/span&gt;2019-06-06 07:16:41.452 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] client.go 133: Assigned cluster GUID &lt;span class=&quot;nv&quot;&gt;ClusterGUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;05d43659a30f4f08a15f9515fcd0278f&quot;&lt;/span&gt;
2019-06-06 07:16:41.471 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 419: CALICO_IPV4POOL_NAT_OUTGOING is &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;defaulted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; through environment variable
2019-06-06 07:16:41.471 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 659: Ensure default IPv4 pool is created. IPIP mode: off
2019-06-06 07:16:41.473 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 670: Created default IPv4 pool &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.0.0/16&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; with NAT outgoing true. IPIP mode: off
2019-06-06 07:16:41.473 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 419: FELIX_IPV6SUPPORT is &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;defaulted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; through environment variable
2019-06-06 07:16:41.473 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 626: IPv6 supported on this platform: &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;2019-06-06 07:16:41.473 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 419: CALICO_IPV6POOL_NAT_OUTGOING is &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;defaulted&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; through environment variable
2019-06-06 07:16:41.473 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 659: Ensure default IPv6 pool is created. IPIP mode: off
2019-06-06 07:16:41.475 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 670: Created default IPv6 pool &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;fd80:24e2:f998:72d6::/64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; with NAT outgoing false. IPIP mode: off
2019-06-06 07:16:41.514 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][8] startup.go 131: Using node name: node1
2019-06-06 07:16:41.814 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;INFO][12] client.go 202: Loading config from environment
Starting libnetwork service
Calico node started successfully
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;设置主机网络，例如 enable IP forwarding。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载并启动 calico-node 容器，calico 会以容器的形式运行（与 weave 类似）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;连接 etcd。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;calico 启动成功。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;查看calico运行状态:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# calicoctl node status
Calico process is running.

IPv4 BGP status
+---------------+-------------------+-------+----------+--------+
| PEER ADDRESS  |     PEER TYPE     | STATE |  SINCE   |  INFO  |
+---------------+-------------------+-------+----------+--------+
| 192.168.33.12 | node-to-node mesh | start | 07:17:09 | Active |
+---------------+-------------------+-------+----------+--------+

IPv6 BGP status
No IPv6 peers found.

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# calicoctl node status
Calico process is running.

IPv4 BGP status
+---------------+-------------------+-------+----------+-------------+
| PEER ADDRESS  |     PEER TYPE     | STATE |  SINCE   |    INFO     |
+---------------+-------------------+-------+----------+-------------+
| 192.168.33.12 | node-to-node mesh | up    | 07:17:13 | Established |
+---------------+-------------------+-------+----------+-------------+

IPv6 BGP status
No IPv6 peers found.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建calico网络：&lt;/p&gt;

&lt;p&gt;在 node1 或 node2 上执行如下命令创建 calico 网络 cal_ent1：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker network create --driver calico --ipam-driver calico-ipam cal_net1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;–driver calico 指定使用 calico 的 libnetwork CNM driver。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;–ipam-driver calico-ipam 指定使用 calico 的 IPAM driver 管理 IP。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;calico 为 global 网络，etcd 会将 cal_net 同步到所有主机。&lt;/p&gt;

&lt;h2 id=&quot;calico网络结构&quot;&gt;Calico网络结构&lt;/h2&gt;

&lt;p&gt;在 node1 中运行容器 bbox1 并连接到 cal_net1：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container run --net cal_net1 --name bbox1 -tid busybox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;查看 bbox1 的网络配置:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;bbox1 ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue qlen 1
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
5: cali0@if6: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&amp;gt; mtu 1500 qdisc noqueue 
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff
    inet 192.168.166.128/32 brd 192.168.166.128 scope global cali0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;cali0 是 calico interface，分配的 IP 为 192.168.166.128。cali0 对应 node1 编号 6 的 interface calicce21fc3677@if5&lt;/p&gt;

&lt;p&gt;node1 将作为 router 负责转发目的地址为 bbox1 的数据包&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# ip r
default via 10.0.2.2 dev eth0 proto static metric 100 
10.0.2.0/24 dev eth0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 10.0.2.15 metric 100 
172.17.0.0/16 dev docker0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 172.17.0.1 
192.168.33.0/24 dev eth1 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 192.168.33.11 metric 100 
192.168.104.0/26 via 192.168.33.12 dev eth1 proto bird 
192.168.166.128 dev calicce21fc3677 scope &lt;span class=&quot;nb&quot;&gt;link 
&lt;/span&gt;blackhole 192.168.166.128/26 proto bird 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;所有发送到 bbox1 的数据都会发给calicce21fc3677，因为calicce21fc3677 与 cali0 是一对 veth pair，bbox1 能够接收到数据。&lt;/p&gt;

&lt;p&gt;接下来我们在 host2 中运行容器 bbox2，也连接到 cal_net1：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node2 ~]# docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;bbox2 ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue qlen 1
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
5: cali0@if6: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&amp;gt; mtu 1500 qdisc noqueue 
    &lt;span class=&quot;nb&quot;&gt;link&lt;/span&gt;/ether ee:ee:ee:ee:ee:ee brd ff:ff:ff:ff:ff:ff
    inet 192.168.104.0/32 brd 192.168.104.0 scope global cali0
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;IP 为192.168.104.0&lt;/p&gt;

&lt;p&gt;node2 添加了两条路由：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node2 ~]# ip r
default via 10.0.2.2 dev eth0 proto static metric 100 
10.0.2.0/24 dev eth0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 10.0.2.15 metric 100 
172.17.0.0/16 dev docker0 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 172.17.0.1 
192.168.33.0/24 dev eth1 proto kernel scope &lt;span class=&quot;nb&quot;&gt;link &lt;/span&gt;src 192.168.33.12 metric 100 
192.168.104.0 dev calib5228fd5fcd scope &lt;span class=&quot;nb&quot;&gt;link 
&lt;/span&gt;blackhole 192.168.104.0/26 proto bird 
192.168.166.128/26 via 192.168.33.11 dev eth1 proto bird 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;目的地址为 node1 容器 subnet 192.168.166.128/26 的路由。&lt;/li&gt;
  &lt;li&gt;目的地址为本地 bbox2 容器 192.168.104.0 的路由。&lt;/li&gt;
  &lt;li&gt;注意到node1的路由表，同样的，node1 也自动添加了到 192.168.104.0/26 的路由。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;calico-的默认连通性&quot;&gt;Calico 的默认连通性&lt;/h2&gt;

&lt;p&gt;测试一下 bbox1 与 bbox2 的连通性：&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@node1 ~]# docker &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;bbox1 ping bbox2
PING bbox2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;192.168.104.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 56 data bytes
64 bytes from 192.168.104.0: &lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;62 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.996 ms
64 bytes from 192.168.104.0: &lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;62 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.568 ms
64 bytes from 192.168.104.0: &lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;62 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.498 ms
64 bytes from 192.168.104.0: &lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;62 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.539 ms
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;calico 默认的 policy 规则是：容器只能与同一个 calico 网络中的容器通信。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;既然这是默认 policy，那就有方法定制 policy，这也是 calico 较其他网络方案最大的特性。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 06 Jun 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-06-06/Docker%E9%83%A8%E7%BD%B2Calico%E7%BD%91%E7%BB%9C/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-06-06/Docker%E9%83%A8%E7%BD%B2Calico%E7%BD%91%E7%BB%9C/</guid>
        
        <category>容器</category>
        
        
        <category>网络</category>
        
      </item>
    
      <item>
        <title>美帝游记——2.开车</title>
        <description>&lt;p&gt;　　第一次在国外开车，还是要做足准备的。美国跟中国一样都是左舵，靠右行驶，车的构造也是类似的，总体上很容易上手。租车的时候会检查驾驶证，需要至少一年的经验。&lt;/p&gt;

&lt;p&gt;　　本次美国行程，包括2个大城市（旧金山、洛杉矶）和1号公路，国家公园（优胜美地），山道跟乡村，还有城市道路。&lt;/p&gt;

&lt;p&gt;　　我是第一次出国自驾，但是美国道路让我头一天就能够非常适应，手机导航也可以很好地工作。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56277050-2d70b480-6136-11e9-95f4-4ddab4c2dc64.jpg&quot; alt=&quot;旧金山&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　美国即使是大城市，也有大量低矮的房子，所以整个城市是按摊大饼的方式设计的，这导致的结果是在路上，车比人多，而且每家人均一辆车，整个城市的运转非常依赖私人汽车，所以美国也是最适合自驾游的国家之一。&lt;/p&gt;

&lt;p&gt;　　在旧金山，半小时能开40+公里，在重庆，半小时只能开10公里。但是由于中国城市功能集中在市中心，美国会比较分散。&lt;/p&gt;

&lt;h2 id=&quot;租车&quot;&gt;租车&lt;/h2&gt;

&lt;p&gt;　　我们租了一辆日产楼兰，两个人用绰绰有余。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56276006-598b3600-6134-11e9-9144-ca2983c99ffd.jpg&quot; alt=&quot;美版楼兰&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gps&quot;&gt;GPS&lt;/h2&gt;

&lt;p&gt;　　在美国自驾，GPS是必须品。&lt;/p&gt;

&lt;p&gt;　　在国内开车时，我基本上都用百度地图。不过在美国，3G/4G网络信号并没有覆盖到所有地方。特别是荒无人烟的西部，进入国家公园就没有任何信号。所以无论是安全还是方便，&lt;del&gt;都应该准备一个预装了当地地图的GPS&lt;/del&gt; 实测离线地图APP足矣&lt;/p&gt;

&lt;h2 id=&quot;限速&quot;&gt;限速&lt;/h2&gt;

&lt;p&gt;　　美国限速设置更高，距离单位是英里（美国时速是以MILE/小时计算，1MILE＝1.6公里。在路标上也会见到MPH的标识，就是Mile per Hour的意思）。&lt;/p&gt;

&lt;p&gt;　　换算过来之后，一般的两车道郊区公路和市区高速路限速65 MPH，而实际开的时候如果有“合理并且谨慎的理由”（”reasonable and prudent”），可以超速一点点（不超过10%）。什么是合理并且谨慎的理由，比如环境、路况、跟随车流等。&lt;/p&gt;

&lt;p&gt;　　对比而言，中国的三车道大马路也经常限速60公里，让人特别无语，路过时几乎没有人能不超速，而且超速也没什么后果。从这点上来说，中国是立法严格，但是执法宽松。美国是立法宽松，但是执法严格。&lt;/p&gt;

&lt;p&gt;　　有一些路的最左侧设置了carpool lane（地上画了菱形），这条路是给车内有2人（包括司机）以上的车辆行驶用的。这个是为了鼓励多人同行，而不是一人开一辆车，不过观察来看，大多数车都是司机一个人（80%），所以就只能在普通速度的车道上开了（普通车道也非常快，能达到限速上限），所以我们也没有去尝试carpool lane。&lt;/p&gt;

&lt;h2 id=&quot;stop-sign&quot;&gt;STOP SIGN&lt;/h2&gt;

&lt;p&gt;　　这个是最重要的，STOP这个标识，看到了一定要完全停下来，左右观察完全没问题再通过。&lt;/p&gt;

&lt;p&gt;　　在某些十字路口，STOP SIGN代替了红绿灯，这样道路运行能更加顺畅。国内也有STOP SIGN，不过据我观察几乎都是无视..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56277142-5abd6280-6136-11e9-9512-28c037fc773d.jpg&quot; alt=&quot;stop sign&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　在一些小路进入大道的时候，会有单向的STOP标识，在主道上没有。所以这种情况下大道上的车是完全不会减速的，在美国这是社会共识，所以小路让主路、左转让直行是大家都遵守的。在旧金山有一次我左转看见绿灯就转了，但是对面直行还是绿灯，相当惊险，所幸没有出现事故。&lt;/p&gt;

&lt;p&gt;　　刚去美国开车的中国人可能会不习惯，我的车身都挤出半个头了，为什么他不让我呢？这种情况下真的有可能酿成车祸！因为对方思维方式不是这样的，他看见你准备并道反而会加速，是为了更快通过不至于影响你。&lt;/p&gt;

&lt;h2 id=&quot;道路&quot;&gt;道路&lt;/h2&gt;

&lt;p&gt;　　在斯坦福大学开车，并没有一个大门，开着开着，路的两侧开始出现整齐的棕榈树，这时候已经进入斯坦福大学的园区。&lt;/p&gt;

&lt;p&gt;　　在一号公路开车，路的右侧都是无敌海景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56277975-f13e5380-6137-11e9-9061-899d6a1ee95e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;停车&quot;&gt;停车&lt;/h2&gt;

&lt;p&gt;　　大城市里停车比较困难，停车场很贵。马路边的车位一般是用咪表，而且要注意可以停车的时段和时长，超了可是会有警察来贴条的。&lt;/p&gt;

&lt;h2 id=&quot;跟中国开车的对比&quot;&gt;跟中国开车的对比&lt;/h2&gt;

&lt;p&gt;　　刚回国的时候，我还有点不适应国内的开车情况，经常有“你TM在逗我？”的感觉。其实我觉得，就TM是因为总有傻逼乱抢道、逆行、开远光灯、按喇叭、左转不让直行、不看道路突然起步、突然进入主道等。&lt;/p&gt;

&lt;p&gt;　　我平时也算比较温和，但是在国内开车也时常会忍无可忍地按喇叭，把在美国养成的习惯全部抛弃。我现在更是从一个“车怒症”患者，变成了一个“路怒症”患者。&lt;/p&gt;

&lt;p&gt;　　在开车的时候，我一直努力做一个，不给别人添麻烦的人。&lt;/p&gt;

&lt;p&gt;　　我尽自己的全力，努力遵守所有的交通规则，给其他的人以便利。&lt;/p&gt;

&lt;p&gt;　　当然，我这样做最重要的目的，是为了保护自己和家人的安全。我希望这些安全，尽可能在我的控制范围之内。&lt;/p&gt;

&lt;p&gt;　　但，我依然是一个路怒症！！！！！&lt;/p&gt;

&lt;p&gt;　　为什么？&lt;/p&gt;

&lt;p&gt;　　因为那些人从来不顾别人的感受，野蛮、粗暴、横冲直撞，无时不刻的置自己与别人于危险之中浑然不觉甚至洋洋自得。我们没有文化的人就是这样的？.jpg&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-04-17/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-2.%E5%BC%80%E8%BD%A6/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-04-17/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-2.%E5%BC%80%E8%BD%A6/</guid>
        
        <category>游记</category>
        
        
        <category>随行</category>
        
      </item>
    
      <item>
        <title>使用 prometheus 和 grafana 监控 linux 机器</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#运行prometheus&quot; id=&quot;markdown-toc-运行prometheus&quot;&gt;运行prometheus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用-node-exporter-收集监控数据&quot; id=&quot;markdown-toc-使用-node-exporter-收集监控数据&quot;&gt;使用 node exporter 收集监控数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#安装配置-grafana&quot; id=&quot;markdown-toc-安装配置-grafana&quot;&gt;安装配置 grafana&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#配置告警&quot; id=&quot;markdown-toc-配置告警&quot;&gt;配置告警&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　Prometheus 是一个非常优秀的监控工具。准确的说，应该是监控方案。Prometheus 提供了监控数据搜集、存储、处理、可视化和告警一套完整的解决方案。让我们先来看看 Prometheus 的架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56795946-2a677980-6844-11e9-9cfd-5bc9be82b2e0.jpg&quot; alt=&quot;prometheus1&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;prometheus server 位于中心，负责时序数据的收集、存储和查询&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;左边是数据来源，prometheus 统一采用拉取的模式（pull mode）从兼容的 HTTP 接口处获取数据，数据源可以分为三种&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　1. 本身就暴露 prometheus 可读取 metrics 数据的或者专门为某个组件编写的 exporter，称为 Jobs 或者 Exporters，比如 node exporter&lt;/p&gt;

&lt;p&gt;　　2. 通过 push gateway 可以把原来 push 类型的数据转换成 pull 类型&lt;/p&gt;

&lt;p&gt;　　3. 其他 prometheus server&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;上面是目标自动发现机制。对于生产的很多情况，手动配置所有的 metrics 来源可能会非常繁琐，所以 prometheus 支持 DNS、k8s、Consul 等服务发现机制来动态地获取目标源进行数据抓取&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;右下方是数据输出，一般是用来进行 UI 展示，可以使用 grafana 等开源方案，也可以直接读取 prometheus 的接口进行自主开发&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;右上方是告警部分，用户需要配置告警规则，一旦 alertManager 发现监控数据匹配告警规则，就把告警信息通过邮件、社交账号发送出去&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;　　整个系统使用了三个组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;node-exporter：运行在主机上收集操作系统上各种数据的 agent，prometheus 中称为 exporter&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;prometheus server：开源的时序数据库，作为数据存储和分析的中心&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;grafana：数据展示分析界面，提供各种强大的 dashboard，可以从多个数据源读取数据，其中就包括 prometheus&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE：所有的服务都是通过 docker 启动，需要安装 docker 和 docker-compose&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;运行prometheus&quot;&gt;运行prometheus&lt;/h2&gt;

&lt;p&gt;首先，我们创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;文件，里面只包含 prometheus 一个服务：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:v2.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--config.file=/etc/prometheus/prometheus.yml'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090:9090'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中比较重要的是&lt;code class=&quot;highlighter-rouge&quot;&gt;prometheus.yml&lt;/code&gt;文件，它是 Prometheus Server 的配置文件：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;external_labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my-monitor'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;prometheus'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9090'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　这个配置文件一共分为两个部分：&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;scrape_configs&lt;/code&gt;，前者是全局的配置，如果后面的任务没有对特定配置项进行覆盖，这里的选项会生效。这里有两个配置项，&lt;code class=&quot;highlighter-rouge&quot;&gt;scrape_interval&lt;/code&gt;表示 prometheus server 抓取的周期，如果太频繁会导致 prometheus 压力比较大，如果太久，可能会导致某些关键数据漏掉，推荐根据每个任务的重要性和集群规模分别进行配置。&lt;/p&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;scrape_configs&lt;/code&gt;配置了每个抓取任务，因此是一个列表，这里我们只有一个任务，那就是抓取 prometheus 本身的 metrics 。配置里面最重要的是&lt;code class=&quot;highlighter-rouge&quot;&gt;static_configs.targets&lt;/code&gt;，表示要抓取任务的 HTTP 地址，默认会在&lt;code class=&quot;highlighter-rouge&quot;&gt;/metrics&lt;/code&gt; url 处进行抓取，比如这里就是 http://localhost:9090/metrics。 这是 prometheus 本身提供的监控数据，可以在浏览器中直接查看。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56795973-38b59580-6844-11e9-8a1a-809a313c4bab.png&quot; alt=&quot;prometheus2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　每个数据都是有一个名字和一系列称为 label 的键值对组成的，prometheus 在抓取数据的时候还会自动添加上&lt;code class=&quot;highlighter-rouge&quot;&gt;instance&lt;/code&gt;（节点的 host:port 标识）和&lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt;（任务名称）两个 label 作为任务之间的区分。&lt;/p&gt;

&lt;p&gt;　　这些数据本身没有时间信息，当 prometheus 抓取的时候会自动添加上当时的时间戳。此外这些数据在客户端会分成四种不同的类型：counter、gauge、histogram 和 summary。更多关于 prometheus metrics 数据类型的说明请查阅官方文档。&lt;/p&gt;

&lt;p&gt;　　运行&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;启动服务，然后在浏览器中打开 http://server-ip:9090/status 查看 prometheus 运行的状态信息&lt;/p&gt;

&lt;h2 id=&quot;使用-node-exporter-收集监控数据&quot;&gt;使用 node exporter 收集监控数据&lt;/h2&gt;

&lt;p&gt;　　虽然监控 prometheus 服务自身是件有趣而且有用的事情，但是我们的目标是监控 linux 主机。因为 prometheus 只能从 HTTP 接口的某个地址来拉取监控数据，因此需要一个工具把 linux 提供的系统数据以 HTTP 服务的形式暴露出来。庆幸的是，prometheus 官方社区有很多 exporter，它们负责把某个组件或者系统的监控数据以 prometheus 能理解的方式暴露出来，其中 node exporter 就是导出 unix/linux 系统监控数据的工具。&lt;/p&gt;

&lt;p&gt;　　node exporter 主要是从&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;中读取 linux 的各种数据，修改 docker-compose.yml 文件，添加上 node-exporter 相关的内容，node-exporter 默认会监听在 9100 端口：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:v2.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--config.file=/etc/prometheus/prometheus.yml'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090:9090'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;node-exporter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/node-exporter:v0.15.2&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9100:9100'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　为了让 prometheus 收集 node-exporter 的内容，我们需要在配置文件中加上一个单独的任务：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5s&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;external_labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;monitor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my-monitor'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;scrape_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;prometheus'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;localhost:9090'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;job_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;resources'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scrape_interval&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10s&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;static_configs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;targets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;node-exporter:9100'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　因为 docker-compose 会自动做服务到 IP 地址的解析，因此这里可以直接使用 node-exporter:9100 作为地址。&lt;/p&gt;

&lt;p&gt;　　再次运行，确认 prometheus 中 targets 列表中有 node-exporter。&lt;/p&gt;

&lt;h2 id=&quot;安装配置-grafana&quot;&gt;安装配置 grafana&lt;/h2&gt;

&lt;p&gt;　　grafana 是一款强大的 dashboard 工具，界面设计很好看，功能强大，可配置性非常灵活。&lt;/p&gt;

&lt;p&gt;　　同样，在 docker-compose.yml 文件中加入 grafana 服务：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:v2.11.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus_data:/prometheus&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--config.file=/etc/prometheus/prometheus.yml'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9090:9090'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;node-exporter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/node-exporter:v0.16.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;9100:9100'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;grafana&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana/grafana:6.2.5&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;grafana_data:/var/lib/grafana&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GF_SECURITY_ADMIN_PASSWORD=pass&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prometheus&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3000:3000'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;grafana_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prometheus_data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　这里使用 docker 的 volumes 来保存 grafana 和 prometheus 运行过程中产生的数据来保证持久化，而且使用&lt;code class=&quot;highlighter-rouge&quot;&gt;GF_SECURITY_ADMIN_PASSWORD=pass&lt;/code&gt;环境变量设置 admin 的密码。&lt;/p&gt;

&lt;p&gt;　　grafana 本身只是一个 dashboard，它可以从多个数据源中获取数据进行展示，比如我们这里使用的 prometheus。所以在正式配置界面之前，需要先添加数据源，点击 grafana 左上角按钮找到 Data Sources ，进入对应页面。按照下面的内容进行填写，主要是 Type 要选择 prometheus，URL 添加 grafana 服务能访问的 prometheus 地址；Name 字段随便填写一个用来标记来源的名字即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56796031-5256dd00-6844-11e9-8097-633f55fd1c24.png&quot; alt=&quot;prometheus3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　然后创建一个 dashboard，并里面添加 graph，在 graph 中添加一个 panel，我们用这个 panel 展示系统的 load 数据。编辑 panel 数据，选择 data source 为之前添加的 prometheus，然后填写 query，系统 node 比较简单，一共是&lt;code class=&quot;highlighter-rouge&quot;&gt;node_load1&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;node_load5&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;node_load15&lt;/code&gt;，分别是系统最近一分钟、五分钟和十五分钟的 load 数值。输入完成后点击输入框之外，grafana 会自动更新上面的图表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56796069-61d62600-6844-11e9-9562-067c6a075ea7.png&quot; alt=&quot;prometheus4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　类似的，可以添加其他的 panel，展示系统方方面的监控数据，比如 CPU、memory、IO、网络等。手动通过界面对 grafana 可以很灵活地创建出很强大的图表，但是这无疑会耗费很多时间，而且 node exporter 这种监控数据是通用的，如果所有人都手动创建一遍无疑是很多重复工作。为此，grafana 支持导入和导出配置，并且提供 &lt;a href=&quot;https://grafana.com/dashboards&quot;&gt;官方社区&lt;/a&gt; 供大家分享 dashboard 配置。&lt;/p&gt;

&lt;p&gt;　　每个 dashboard 都有一个编号，比如 &lt;a href=&quot;https://grafana.com/dashboards/22&quot;&gt;编号 22 的 dashboard &lt;/a&gt; 就是专门为 node-exporter 设计的展示图表。在 grafana 中点击导入 dashboard，添加编号选择数据源，就能得到已经配置完整的图表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56796100-6e5a7e80-6844-11e9-9a75-32b6b44fd2b0.png&quot; alt=&quot;prometheus5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　如果对 dashboard 有什么不满，可以直接在页面进行添加和编辑，然后可以导出 json 文件，以便重复使用。&lt;/p&gt;

&lt;h2 id=&quot;配置告警&quot;&gt;配置告警&lt;/h2&gt;

&lt;p&gt;　　通过 grafana 图表我们可以知道系统各种指标随着时间的变化，方便轻松判断系统某个资源是否异常。但是我们不能一直盯着 dashboard，还需要系统发生异常的时候能立即通过邮件或者其他方式通知我们，这就是告警的功能。&lt;/p&gt;

&lt;p&gt;　　prometheus 提供用户可以自己配置的告警规则，在处理 metrics 数据的时候，如果发现某个规则被触发，就执行对应的告警动作，通过发邮件或者其他方式通知用户。&lt;/p&gt;

&lt;p&gt;　　对于我们的单节点主机来说，可以定义两个简单的告警规则：当主机 download 掉，或者 CPU load 持续过高一段时间就发送告警。对此，需要新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;alert.rules&lt;/code&gt;文件，用来保存告警规则，按照需求对应的内容如下：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;➜  monitor git:(master) ✗ cat alert.rules&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;groups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node-alert&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service_down&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;up == &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2m&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;high_load&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node_load1 &amp;gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　在启动 prometheus 服务的时候把告警规则文件 mount 到 service 中，如下添加一个 volume：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;➜  monitor git:(master) ✗ cat docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;prometheus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;prom/prometheus:v2.0.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./prometheus.yml:/etc/prometheus/prometheus.yml&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./alert.rules:/etc/prometheus/alert.rules&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;......&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　然后，告知 prometheus 加载这些规则：&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;➜  monitor git:(master) ✗ cat prometheus.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;......&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rule_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;alert.rules'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　prometheus 还提供了 alertmanager 可以自动化根据告警规则触发对应的动作，一般是各种方式通知用户和管理员，这里就不再介绍了。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;　　需要注意的是，这只是一个本地的 demo 环境，不能直接在生产上使用。首先我们没有配置安全访问，所有的服务都是 HTTP；其次 docker-compose 运行的话，所有的服务都是在同一台机器上，无法做到分布式监控和高可用。&lt;/p&gt;

&lt;p&gt;　　如果想在生产中使用 prometheus 和 grafana，请参考 &lt;a href=&quot;https://prometheus.io/docs/introduction/overview/&quot;&gt;官方文档&lt;/a&gt; 。&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-03-05/%E4%BD%BF%E7%94%A8-prometheus-%E5%92%8C-grafana-%E7%9B%91%E6%8E%A7-linux-%E6%9C%BA%E5%99%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-03-05/%E4%BD%BF%E7%94%A8-prometheus-%E5%92%8C-grafana-%E7%9B%91%E6%8E%A7-linux-%E6%9C%BA%E5%99%A8/</guid>
        
        <category>容器</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>2018年终总结</title>
        <description>&lt;p&gt;　　2018对我来说算是折腾的一年，回头一想才发现发生了很多重要的事情，可能是过去几年里最充满变数的一年了。&lt;/p&gt;

&lt;p&gt;　　总的来说分为三个阶段：
　　&lt;/p&gt;
&lt;h3 id=&quot;ccn阶段1-8月&quot;&gt;CCN阶段1-8月&lt;/h3&gt;

&lt;p&gt;　　在数通组工作五年，在系统组呆了一年，感觉最近一年的工作成果可能是前后几年最有成就感的了，同时推进了三个项目落地，当得知付出并没有得到任何回报的时候，不得不去面对一个事实，接下来几年如果一直在这个组待下去，可能真的没有任何机会了。最黄金的五年却没有换来自己预期目标，而且还相差甚远，没有几个五年可以浪费了，所以必须改变，然后就是换工作，思考接下来的发展方向。最近得知耀哥也准备离职，看来系统组还是比较锻炼人~~&lt;/p&gt;

&lt;h3 id=&quot;9月的美帝之旅&quot;&gt;9月的美帝之旅&lt;/h3&gt;

&lt;p&gt;　　一号公路的蜜月旅行，之前也写了游记开篇：&lt;a href=&quot;https://ixjx.github.io/blog/2018-09-28/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-1.%E5%87%86%E5%A4%87/&quot;&gt;2018-09-28-美帝游记——1.准备&lt;/a&gt;，这个坑有空慢慢填了。&lt;/p&gt;

&lt;h3 id=&quot;华智阶段10-12月&quot;&gt;华智阶段10-12月&lt;/h3&gt;

&lt;p&gt;　　一开始准备做大数据平台运维，想着顺便锻炼一下编码能力。奈何项目黄了，被转到测试组做DevOps。当然我不是说测试不重要，恰恰相反，测试比开发更重要，而且微服务更需要大量的测试。&lt;/p&gt;

&lt;p&gt;　　一切从头开始对我来说是一个不小的挑战，天天加班学习新知识，希望尽快上手，因为没有太多时间可以用来耽误了。然而这个想法也在不知不觉中影响了自己的工作方式，导致了一些急功近利最容易出现的后果，也间接导致了再次离职。
　　&lt;/p&gt;
&lt;h3 id=&quot;cmiot阶段-1月&quot;&gt;CMIOT阶段 1月&lt;/h3&gt;

&lt;p&gt;　　兜兜转转，还是回来干老本行，工作更细分，能够学的深入一些，多花一点时间在学习上。&lt;/p&gt;

&lt;p&gt;　　工作仍在挣扎，心态也在起起伏伏，希望新的一年能变得平和，多思考，多总结，期待一个新的突破。&lt;/p&gt;

&lt;h3 id=&quot;我的2018&quot;&gt;我的2018&lt;/h3&gt;

&lt;p&gt;　　回头看，这五年来，我从来都只是“短暂地胜任”自己的工作。每当我觉得能够驾轻就熟地处理目前的日常，就会迎来新的挑战。&lt;/p&gt;

&lt;p&gt;　　想到这一点，我突然悟到一种“佛系”的工作哲学：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;每当你能胜任当前的工作，就会迎来更高难度的挑战。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　每一个能胜任当前工作岗位的人，都会被提拔。继续胜任，那就继续提拔，直到不能胜任。&lt;/p&gt;

&lt;p&gt;　　因此，不用特别在意自己的头衔、权限和职级，外部的认可是你能力的反馈。你没有被提拔，大概率是因为还不胜任当前工作。如果完全胜任还没有被安排更有挑战的工作，要么自己找事情做，要么跳槽转岗。&lt;/p&gt;

&lt;p&gt;　　反过来说，自知自己能力还达不到岗位要求也不用担心，不胜任是常态，以胜任为目标就好啦。&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Jan 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019-01-28/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://localhost:4000/2019-01-28/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
        
        <category>年终总结</category>
        
        
        <category>水</category>
        
      </item>
    
      <item>
        <title>基于Docker+Jenkins+Gitlab搭建持续集成测试环境</title>
        <description>&lt;p&gt;　　七牛云的测试域名到期了，所有图片的图床都崩了，早知如此不该图方便，自己做静态资源算了。进入今天的正题，到新公司一个月，项目开发前后端分离，差不多拉通了开发到测试的流程，在此记录一下。&lt;/p&gt;

&lt;p&gt;　　随着DevOps理念和敏捷理念的发展，我们希望通过自动化技术，加快项目的迭代。尤其是当使用微服务方案后，面临在大量的项目构建和部署工作，借助于jenkins的持续集成，可以快速把应用打包成docker镜像，实现自动部署。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56795878-f2f8cd00-6843-11e9-9188-214621243639.png&quot; alt=&quot;jenkins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图演示了以下的场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;开发者向自己的gitlab提交了代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jenkins通过定时任务检测到了代码有变成，执行自动化构建过程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jenkins在自动化构建脚本中调用docker命令将构建好的镜像push到私有镜像中心harbor&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同时，jenkins也可以直接执行remote shell启动构建好的容器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;构建失败或者成功，可以及时将结果推送给相关人员，比如测试人员，安排测试&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务端可以手动通过docker命令，从镜像仓库中心拉取镜像，进行手动部署&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;环境如下:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;192.168.110.202&lt;/td&gt;
      &lt;td&gt;harbor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;192.168.110.203&lt;/td&gt;
      &lt;td&gt;gitlab jenkins&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　　除了jenkins均采用docker部署。&lt;/p&gt;

&lt;h2 id=&quot;1-搭建harbor&quot;&gt;1. 搭建harbor&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;docker run -d -p 5000:5000 -v /opt/docker-registry:/var/lib/registry registry&lt;/del&gt; 一开始用的registry，连个UI都没有，使用不便，弃了&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md&quot;&gt;harbor官方安装文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;采用offline安装包,在执行./prepare的时候抛出如下异常：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@ubuntu:~/harbor# ./prepare 
Fail to generate key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要修改prepare文件，将第498行：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty_subj = &quot;/C=/ST=/L=/O=/CN=/&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty_subj = &quot;/C=US/ST=California/L=Palo Alto/O=VMware, Inc./OU=Harbor/CN=notarysigner&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;配置daemon.json，去掉docker(每个docker client都需要配置)默认的https的访问&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/docker/daemon.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;里面的内容是一个json对象,加上一项insecure-registries，地址自己更改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;insecure-registries&quot;:[&quot;192.168.1.78&quot;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启docker,执行&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl daemon-reload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl restart docker&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-搭建gitlab&quot;&gt;2. 搭建gitlab&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--detach&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; localhost &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 443:443 &lt;span class=&quot;nt&quot;&gt;--publish&lt;/span&gt; 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /opt/gitlab/config:/etc/gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /opt/gitlab/logs:/var/log/gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;--volume&lt;/span&gt; /opt/gitlab/data:/var/opt/gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
gitlab/gitlab-ce:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　之后push demo代码。&lt;/p&gt;

&lt;h2 id=&quot;3-jenkins安装&quot;&gt;3. jenkins安装&lt;/h2&gt;

&lt;p&gt;　　这一块比较复杂，不讲了&lt;/p&gt;

&lt;h2 id=&quot;4-流水线demo&quot;&gt;4. 流水线demo&lt;/h2&gt;

&lt;p&gt;　　前端用npm打包，后端用的maven。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'拉取代码'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;branch:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alarm_system_v2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;credentialsId:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5d7cb03e-66df-4002-a2d5-70f8aa196ac1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://192.168.110.8:10080/fehz/react-garden-system.git'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'安装依赖，进行前端代码鉴定'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'node-v10.6.0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                    npm -v
                    node -v
                    npm install react-tree-module-web --registry=http://192.168.110.26:8088/repository/npm/
                    npm install react-common-module-web --registry=http://192.168.110.26:8088/repository/npm/
                    npm install
                    npm run lint --force
                    '''&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;checkstyle&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;canComputeNew:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;defaultEncoding:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;healthy:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eslint.xml'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;unHealthy:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaCodeQualityPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;checkstyleFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'**/*/eslint.xml'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;findbugsFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;jacocoFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;junitFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pmdFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'npm打包'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'node-v10.6.0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'InProgress'&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                    npm run build:test
                    cp /var/lib/jenkins/workspace/build_prj/*.js $WORKSPACE/node_modules/connect-cas2/lib/
                    '''&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'构建docker镜像'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                ###根据git库设置包名
                jar_name=192.168.110.202/isp/react-garden-alarm-system
                echo &quot;包名:$jar_name&quot;
                docker build -t $jar_name .
                '''&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'将docker镜像上传到镜像仓库'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker push 192.168.110.202/isp/react-garden-alarm-system:latest'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker image prune -f'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'测试环境部署'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                echo &quot;登录到192.168.110.211服务器执行部署脚本&quot;
                ssh root@192.168.110.211 &quot;sh /opt/jenkins/deploy.sh react_garden_alarm_system&quot;
                '''&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hygieiaDeployPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;applicationName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-garden-system-alarm-dev'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactDirectory:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactGroup:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactVersion:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;environmentName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TEST'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'拉取代码'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;branch:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'develop-isp'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;credentialsId:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5d7cb03e-66df-4002-a2d5-70f8aa196ac1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://192.168.110.8:10080/liuran/framework-alarm.git/'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'后端代码鉴定'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;job:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'garden-sonar-dev'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;parameters:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'choose_service'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'framework-alarm-log-sonar'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hygieiaSonarPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ceQueryIntervalInSeconds:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'10'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ceQueryMaxAttempts:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'30'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'构建并打包成docker镜像'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;withMaven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;jdk:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jdk'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;maven:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apache-maven-3.5.4'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'InProgress'&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mvn clean package docker:build'&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'将docker镜像上传到镜像仓库'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker push 192.168.110.202/isp/java/framework-alarm-log:latest'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker image prune -f'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'测试环境部署'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                echo &quot;登录到192.168.110.211服务器执行脚本&quot;
                ssh root@192.168.110.211 &quot;sh /opt/jenkins/deploy.sh java_framework_alarm_log&quot;
                echo &quot;登录到192.168.110.212部署自动化测试环境&quot;
                ssh root@192.168.110.212 &quot;sh /root/isp-alarm.sh&quot;
                '''&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hygieiaDeployPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;applicationName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'garden-framework-alarm-log-dev'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactDirectory:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'target'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactGroup:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.letv.dashboard'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.jar'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactVersion:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;environmentName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TEST'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*post {
        always {
            
            echo 'One way or another, I have finished'
  
        }
        success {
            echo 'I succeeeded!'
			hygieiaBuildPublishStep buildStatus: 'Success'
        }
        unstable {
            echo 'I am unstable :/'
			hygieiaBuildPublishStep buildStatus: 'Unstable'
        }
        failure {
            echo 'I failed :('
			hygieiaBuildPublishStep buildStatus: 'Failure'
			
        }
        changed {
            echo 'Things were different before...'
        }
    }*/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后面可以加个post阶段给老大发邮件。。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt;参考&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

login_harbor&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;HARBOR_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;HARBOR_PASSWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harbor12345&quot;&lt;/span&gt;

    docker login &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HARBOR_USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HARBOR_PASSWD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

deploy_new_container&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $1 : $CONTAINER_NAME&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $2 : $OLD_IMAGE_NAME &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $3 : $IMAGE_NAME &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $4 : $PORT &lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker ps &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******删除旧容器完成******&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;iid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker images | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $3}'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker rmi &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$iid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******删除旧镜像完成******&quot;&lt;/span&gt;

    docker pull &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******拉取新镜像完成******&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-Denv=UAT&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******远程部署后端容器完成******&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--restart&lt;/span&gt; always &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ENV_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--env test&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******远程部署前端容器完成******&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;镜像名字不合法，请确认!&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 后端微服务&lt;/span&gt;
java_framework_alarm_log&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java-alarm-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/framework-alarm-log&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/framework-alarm-log:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8086&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

java_isp_ias&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java-ias-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/isp-ias&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/isp-ias:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8089&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 前端&lt;/span&gt;
react_garden_alarm_system&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-alarm-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-alarm-system&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-alarm-system:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8003&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

react_garden_inbreak_system&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-ias-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-inbreak-system&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-inbreak-system:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8005&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

login_harbor

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in 
    &lt;/span&gt;java_framework_alarm_log&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        java_framework_alarm_log
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    java_isp_ias&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        java_isp_ias
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    react_garden_alarm_system&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        react_garden_alarm_system
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    react_garden_inbreak_system&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        react_garden_inbreak_system
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;请输入正确参数!
    java_framework_alarm_log
    java_isp_ias
    react_garden_alarm_system
    react_garden_inbreak_system&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5-问题&quot;&gt;5. 问题&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;gitlab需通过root账号登录，允许本地webhook。这是因为gitlab和jenkins在同一个节点部署，实际分开部署不会有这个问题&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gitlab-rails console production   &lt;span class=&quot;c&quot;&gt;#gitlab居然是用ruby写的&lt;/span&gt;
u &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; User.where&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;email: &lt;span class=&quot;s1&quot;&gt;'admin@example.com'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.first
u.password&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'new_password'&lt;/span&gt;
u.save!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;gitlab配置Admin area：&lt;/p&gt;

&lt;p&gt;Setting-&amp;gt;Network-&amp;gt;Outbound requests&lt;/p&gt;

&lt;p&gt;勾选Allow requests to the local network from hooks and services&lt;/p&gt;

&lt;p&gt;jenkins配置：&lt;/p&gt;

&lt;p&gt;Jenkins–&amp;gt;Jenkins Manages–&amp;gt;Configure System，找到GitLab配置，去掉勾选&lt;/p&gt;

&lt;p&gt;系统管理–&amp;gt;全局安全配置，勾选匿名用户具有可读权限和去掉CSRF防止跨站点请求伪造&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Nov 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018-11-06/%E5%9F%BA%E4%BA%8EDocker+Jenkins+Gitlab%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-11-06/%E5%9F%BA%E4%BA%8EDocker+Jenkins+Gitlab%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
        
        <category>容器</category>
        
        
        <category>随编</category>
        
      </item>
    
      <item>
        <title>美帝游记——1.准备</title>
        <description>&lt;p&gt;　　已经记不起因为什么想去美国度蜜月了，也许是因为American dream？其实老婆是想去希腊的，被我三言两语难民啊、地震啊、海啸啊劝退，这事就定下来了。我们讨论这种计划，基本上都能很快定下来。一方面，可能因为平时爱好和习惯，比较一致。另一方面也确实说明，我在家中的话语权，很有分量（咳咳……）。&lt;/p&gt;

&lt;p&gt;　　其实还是有几个原因的：一、去年去泰国跟团，体验极差，所以这次肯定是自由行，美国是公路上的国家，自驾游的理想目的地。二、加州1号公路声名远扬，无敌海景，还有优胜美地国家公园，Mac OS X系统以此命名的地方，景色不必多说。三、作为一个工程师，朝拜一下硅谷圣地。(四、原计划去尔湾的暴雪总部的，因为一些原因没有去成)&lt;/p&gt;

&lt;p&gt;　　另一个契机是准备离职，婚假不耍就没了，所以提前1个月去成都办了签证，在出行前4天收到护照（慌得要死）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面开始正式的准备工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一1个笔记本&quot;&gt;一、1个笔记本&lt;/h2&gt;

&lt;p&gt;　　如果你是认真策划一次美国自驾游的话，建议你用一个笔记本整理所有的信息。因为你会从很多地方得到很多信息，所以有一个地方来汇总是很重要的，我使用的有道云笔记。&lt;/p&gt;

&lt;h2 id=&quot;二购买机票确定行程&quot;&gt;二、购买机票，确定行程&lt;/h2&gt;

&lt;p&gt;　　我是直接在携程上买的机票，其实如果有时间可以下载各大航空公司的APP多比较下。我们为了保险，面签过了才定的机票，结果回来的机票从4400/两人涨到了6000，血的教训。去我们是定的国航，重庆出发北京中转然后到旧金山。回来是香港航空，洛杉矶出发香港中转最后到重庆。&lt;/p&gt;

&lt;p&gt;　　美国的自驾线路一般有两种选择，一个是贯穿东西的66号公路，在路上见识美国辽阔土地的多种风景，以及东西差异巨大的风俗文化。另一个是西部沿海的1号公路，从旧金山到洛杉矶，沿途一边是悬崖峭壁加上无尽的太平洋。&lt;/p&gt;

&lt;p&gt;　　由于时间关系，当然只有选择1号公路啦，同时感谢我老婆的同学帮我们准备了行程参考~~
　　
　　起点旧金山，终点洛杉矶，我请了婚假，整个行程是11天(其实有点赶，如果时间更充裕会更好)。&lt;/p&gt;

&lt;p&gt;　　因为我们考虑自驾出行，所以主要使用Google Maps来设定行程，比较自由，而且可以设定多个途经点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/4729226/56272060-863b4f80-612c-11e9-8582-21dc1547a0e2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　在设定中途点时，我们先凭自己的喜好，列出一些想去的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;旧金山，想去唐人街，渔人码头，九曲花街，市政厅等等&lt;/li&gt;
  &lt;li&gt;硅谷，斯坦福&lt;/li&gt;
  &lt;li&gt;太浩湖（Tahoe Lake）&lt;/li&gt;
  &lt;li&gt;优胜美地国家公园（Yosemite National Park）&lt;/li&gt;
  &lt;li&gt;一号公路，大瑟尔（Big Sur），卡梅尔小镇，丹麦小镇，赫兹古堡&lt;/li&gt;
  &lt;li&gt;洛杉矶，好莱坞环球影城，购物&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　根据这些景点，我们一步一步调整行车路线，并确保每天的开车路程不超过4小时(然后现实是有一天开了8小时车…因为酒店位置定得有问题，这个后面再说)。&lt;/p&gt;

&lt;p&gt;　　大概计划是，在旧金山玩两天，然后开始自驾之旅，开车太浩湖和优胜美地，之后回旧金山南部，沿着西海岸一路向南，路过圣西米恩，圣芭芭拉，最后来到洛杉矶。时间有限，行程制定得比较简单，每天的具体计划并没有制定得太细致。&lt;/p&gt;

&lt;h2 id=&quot;三签证&quot;&gt;三、签证&lt;/h2&gt;

&lt;p&gt;　　美国旅行签证，最好提前几个月开始准备，第一步是在线申请&lt;a href=&quot;https://ceac.state.gov/GenNIV/Default.aspx&quot;&gt;DS160&lt;/a&gt;，预期花费1小时填写详尽的表格。&lt;/p&gt;

&lt;p&gt;　　虽然页面自带了翻译，但是有些页面不好用，所以还是要有一定英文能力，或者找个朋友在旁边帮忙看着。填写完成的最后，上传照片，并预约时间去成都面签。填表的过程中可以随时保存，得到一个自己的代码，下次可以从中断的地方恢复。&lt;/p&gt;

&lt;p&gt;　　因为申请旅行/签证（B1/B2）的时候，签证官是假设你有留在美国不回来的动机，所以你需要举证说明你肯定会回来的。比如你有在中国地房产、车、高收入的工作，你旅行有详细的计划、资金和伙伴等。所以我按照知乎还有百度上的问题准备了好多资料：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;身份证原件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;护照，签证面谈时有效期须在6个月以上&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;51*51mm方形签证照片一张（美国大使馆要求照片为最近六个月内拍摄的51毫米 x 51毫米,最小为600 x600像素的彩色数码照片,请用回形针别在护照上）&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DS160确认页&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;邀请函及行程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;预约信&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;户口簿原件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;个人工作收入证明&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;房产证原件（可选，，作为财力证明，一家人共同签证使用一本原件即可）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;银行存款证明 （可选，作为财力证明。存期3个月，存金20万左右，在签证面谈时仍在有效期即可）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机动车登记证原件（可选，作为财力证明）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;结婚证（可选，作为财力证明）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;　　除了10(实在没这么多钱)，其他资料都有准备。面签过程比想象中轻松太多，签证官是美国人，但是中文非常好，全程中文沟通。资料也完全没有看，包括打印的行程、机动车行驶证、结婚证……都没看。总体上，非常宽松。&lt;/p&gt;

&lt;p&gt;　　通过之后，把护照留下，选邮寄到家，过了两周收到护照，上面多了一页美国B1/B2签证，有效期10年，每次入境不超过6个月。下次如果续签的话就不需要亲自去成都了，网上办理续签即可。&lt;/p&gt;

&lt;h2 id=&quot;四租车&quot;&gt;四、租车&lt;/h2&gt;

&lt;p&gt;　　第一次飞出亚洲，心情很激动，而且还是去开车，就尤其紧张。首先要准备的是驾照，根据不同的目的地和不同的州法律，有些地方认可中国驾照，有些地方不认可。美国的大部分州是认的，但是为了保险起见我还是在网上免费办了一个驾照翻译件。当然这次旅途这个翻译件全程没有用到。&lt;/p&gt;

&lt;p&gt;　　然后是租车,我还是选择的携程(其他APP懒得再填一遍资料了)，携程只是一个平台，你可以选具体的租车公司，我选的是alamo，因为价格便宜，保险齐全，同时也免异地还车费。实时证明如此，我们到机场租车大厅的时候其他柜台三两只人，只有alamo柜台排着长龙…不过咨询了工作人员后可以选择在自助机器上自助取车，非常方便。还车也很方便，工作人员扫一下挡风玻璃前贴的条码，打个单子就完事，当时我还想问It&lt;code class=&quot;highlighter-rouge&quot;&gt;s OK? 工作人员直接回复：finished,it&lt;/code&gt;s done!&lt;/p&gt;

&lt;p&gt;　　租车的界面很简单，选择起点和终点之后，系统会列出可选的车型和价格，以及取还条件。这里注意几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;价格经常会浮动，有时候中午和下午的价格都不一样。说不清楚为什么，建议可以多关注一段时间看看，找个相对低的价格时候买入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一般是选择车型组，而不是具体车型。比如可以选择（迷你型轿车 经济型轿车 紧凑型轿车 中等型轿车 中大型轿车 大型轿车 豪华型轿车 高级轿车 商务车 SUV 敞篷车 旅行车 皮卡 跑车 特殊车型 跨界车）这些车型组。我选择的是中大型轿车（full size），因为价格只比紧凑型贵一丢丢，但实际上我取到的是一台NISSAN，美版楼兰。两个人用超级大，配置也齐全，舒服。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;租满一周以上会比较便宜，一周内均价很贵。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于油。有些是送一桶油（多给一点钱），有的需要满油取还。最好是满油取还，因为你还车的时候不一定能正好空油还。同时在美国加油不能刷国内信用卡，我是用的现金，这个后面详细说。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于保险（insurance），租车自带的基本保险，是关于车的（碰撞险，盗窃险，第三责任险），但还有一些人身安全的保险，是可选的。租车公司自带的保险比较贵，建议在国内买境外保险。拿着预定单，在当地柜台确认的时候，注意听到insurance这个词的时候，提高警惕，说不需要，自己已经买了保险就好了。如果英语实在不好不用逞强，可以问问他们有没有Chinese工作人员。这一点就有几千的费用，确认清楚比较好。也可以拿到预算消费单的时候，仔细检查下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于还车，取车时间不是按你拿到钥匙的时间，而是按你出租车公司停车场的时间算，所以注意还车时间，不要超了就好。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;五装备&quot;&gt;五、装备&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;拍照设备（三脚架、自拍杆）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPS（淘宝租，备用！西部某些国家公园和1号公路一段没有手机信号就没法用Google地图了），我是在淘宝租了的，1天9块钱。不过全程没用上，在此推荐一个离线地图APP &lt;strong&gt;“探途”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;电话卡（淘宝买）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;出风口手机支架，点烟器USB接口（开车用）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于行李箱和背包的详细估算（我们是两个箱子过去，三个箱子回来）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;墨镜（一定需要！如果近视眼可以用一个夹片，因为加州阳光太热烈）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服装少带一点，去了美国outlets觉得简直是购物天堂&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一张或多张额度够大的全币信用卡，避免换算人民币的手续费（推荐招行全币信用卡，还有返现活动，优胜美地国家公园门票35刀，反了30，美滋滋）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;六酒店&quot;&gt;六、酒店&lt;/h2&gt;

&lt;p&gt;　　其实我非常想全程使用Airbnb，不过老婆觉得不安全，所以我们提前了半个月用booking定的酒店，选的可以免费退订的那种（最神奇的是在途中我发现有两家酒店在入住之前预定更便宜！所以我就退了重订，节约了1000大洋~~）&lt;/p&gt;

&lt;h2 id=&quot;七预算花费&quot;&gt;七、预算花费&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;签证花费（算上去成都的住宿路费）：3000&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机票 4786+5962 = 10748（略贵）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;租车：1935&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保险：370&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;电话卡：169+155 = 324&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPS租金：135&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;酒店：10131&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;500刀现金：500*6.85 = 3425&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;购物：10000&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;杂七杂八花费：……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;共计: 花了4W多，如果不买东西的话，其实全程花费不算贵。&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018-09-28/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-1.%E5%87%86%E5%A4%87/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-09-28/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-1.%E5%87%86%E5%A4%87/</guid>
        
        <category>游记</category>
        
        
        <category>随行</category>
        
      </item>
    
      <item>
        <title>深入理解装饰器</title>
        <description>&lt;p&gt;　　等offer等得心慌，写写之前面试遇到的坑吧。&lt;/p&gt;

&lt;p&gt;　　面试官：看你简历写了熟悉python？&lt;/p&gt;

&lt;p&gt;　　我：…会一点,shell脚本写得比较多&lt;/p&gt;

&lt;p&gt;　　面试官：那你给我讲讲装饰器吧&lt;/p&gt;

&lt;p&gt;　　我：…呵呵&lt;/p&gt;

&lt;p&gt;　　之前只是了解python的函数式编程，大概知道装饰器(decorator)是在代码运行期间动态增加功能同时又不改变原有代码。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt; 函数+返回值高阶函数+实参高阶函数+嵌套函数+语法糖 = 装饰器 &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　你能看懂吗？反正我是没看懂，所以一个一个的查了后才略有理解：装饰器本质上还是函数。&lt;/p&gt;

&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;

&lt;p&gt;　　理解装饰器前，需要明白函数的工作原理，我们先从一个最简单函数定义开始：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　上面定义了一个函数，名字叫foo，也可以把 foo 可理解为变量名，该变量指向一个函数对象&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-8-24/81273610.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　调用函数只需要给函数名加上括号并传递必要的参数（如果函数定义的时候有参数的话）&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　变量名 foo 现在指向 &amp;lt;function foo at 0x1030060c8&amp;gt; 函数对象，但它也可以指向另外一个函数&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# bar()
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-8-24/26546525.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;返回值高阶函数&quot;&gt;返回值高阶函数&lt;/h2&gt;

&lt;p&gt;在Python中，一切皆为对象，函数也不例外，它可以像整数一样作为其它函数的返回值，例如：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# &amp;lt;function foo at 0x10a2f4140&amp;gt;
&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1 
# 等价于
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　调用函数 bar() 的返回值是一个函数对象 &amp;lt;function foo at 0x10a2f4140&amp;gt;，因为返回值是函数，所以我们可以继续对返回值进行调用（记住：调用函数就是在函数名后面加()）调用bar()()相当于调用 foo()，因为 变量 foo 指向的对象与 bar() 的返回值是同一个对象。&lt;/p&gt;

&lt;h2 id=&quot;实参高阶函数&quot;&gt;实参高阶函数&lt;/h2&gt;

&lt;p&gt;　　函数还可以像整数一样作为函数的参数，例如：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　函数 bar 接收一个参数，这个参数是一个可被调用的函数对象，把函数 foo 传递到 bar 中去时，foo 和 fun 两个变量名指向的都是同一个函数对象，所以调用 fun(3) 相当于调用 foo(3)。&lt;/p&gt;

&lt;h2 id=&quot;嵌套函数&quot;&gt;嵌套函数&lt;/h2&gt;

&lt;p&gt;　　函数不仅可以作为参数和返回值，函数还可以定义在另一个函数中，作为嵌套函数存在，例如：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　inner做为嵌套函数，它可以访问外部函数的变量，调用 outer 函数时，发生了3件事：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;给变量 x 赋值为1&lt;/li&gt;
  &lt;li&gt;定义嵌套函数 inner，此时并不会执行 inner 中的代码，因为该函数还没被调用，直到第3步&lt;/li&gt;
  &lt;li&gt;调用 inner 函数，执行 inner 中的代码逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;

&lt;p&gt;　　再来看一个例子：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;　　同样是嵌套函数，只是稍改动一下，把局部变量 x 作为参数了传递进来，嵌套函数不再直接在函数里被调用，而是作为返回值返回，这里的 closure就是一个闭包，本质上它还是函数，闭包是引用了自由变量(x)的函数(inner)。&lt;/p&gt;

&lt;h2 id=&quot;装饰器&quot;&gt;装饰器&lt;/h2&gt;

&lt;p&gt;　　终于到正题了：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　上面这个函数虽然没什么用，但是能说明问题就行。现在，有一个新的需求，需要在执行该函数时加上日志：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志开始&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志结束&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　功能实现，唯一的问题就是它需要侵入到原来的代码里面，把日志逻辑加上去，如果还有好几十个这样的函数要加日志，也必须这样做，显然，这样的代码一点都不Cooooooool。那么有没有可能在不修改业务代码的提前下，实现日志功能呢？答案就是装饰器。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志开始&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 业务函数
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志结束&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　我没有修改 foo 函数里面的任何逻辑，只是给 foo 变量重新赋值了，指向了一个新的函数对象。最后调用 foo()，不仅能打印日志，业务逻辑也执行完了。现在来分析一下它的执行流程。&lt;/p&gt;

&lt;p&gt;　　这里的 outer 函数其实就是一个装饰器，装饰器是一个带有函数作为参数并返回一个新函数的闭包，本质上装饰器也是函数。outer 函数的返回值是 inner 函数，在 inner 函数中，除了执行日志操作，还有业务代码，该函数重新赋值给 foo 变量后，调用 foo() 就相当于调用 inner()&lt;/p&gt;

&lt;p&gt;　　另外，python为装饰器提供了语法糖@，它用在函数的定义处：这样就省去了手动给foo重新赋值的步骤。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#即 @outer 等价于 foo = outer(foo)
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　　当然，实际使用的装饰器更加复杂，比如可以接受参数的装饰器，基于类的装饰器等等，慢慢学吧&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Aug 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018-08-24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-08-24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
        
        <category>python</category>
        
        
        <category>随编</category>
        
      </item>
    
      <item>
        <title>ELK Docker image中文文档</title>
        <description>&lt;p&gt;　　又有两个月没写东西了，主要是最近在看&lt;a href=&quot;https://hub.docker.com/r/sebp/elk/&quot;&gt;ELK&lt;/a&gt;，网上资料一大堆（大多数都是过时的），我发现还是看英文文档比较舒服。&lt;/p&gt;

&lt;p&gt;　　同时为了锻炼一下自己毕业后就没怎么提升的英语水平，免得提Issue时都表达不清楚自己的意思，毕竟还想着去美帝自由行呢，几句Hello I`m fine Thank you 还是要会的吧。脑子一热就决定翻译&lt;a href=&quot;http://elk-docker.readthedocs.io/&quot;&gt;这个文档&lt;/a&gt;，当然翻译过程中没少用翻译软件…&lt;/p&gt;

&lt;p&gt;　　看的时候没觉得什么，真翻译起来才觉得头大，有时明明知道是什么意思，但就是没法很好的用中文表达出来，有些技术上的名词用英文原文比较好，有时候翻译出来又改了回去，所以花了不少时间才做完。&lt;/p&gt;

&lt;p&gt;　　尝试了&lt;a href=&quot;https://www.gitbook.com&quot;&gt;gitbook&lt;/a&gt;写作，写好 &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;SUMMARY.md&lt;/code&gt; ，再 &lt;code class=&quot;highlighter-rouge&quot;&gt;gitbook init&lt;/code&gt; 就生成了大纲，然后上传到&lt;a href=&quot;https://github.com/ixjx/docker-elk-doc&quot;&gt;github repo&lt;/a&gt;，然后再和&lt;a href=&quot;https://ixjx.gitbooks.io/docker-elk-doc&quot;&gt;gitbooks.com&lt;/a&gt;关联一下就自动生成了文档，确实方便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-7-10/46528275.jpg&quot; alt=&quot;这是原文&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-7-11/77399485.jpg&quot; alt=&quot;这是译文&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018-07-10/ELK-Docker-image%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-07-10/ELK-Docker-image%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</guid>
        
        <category>容器</category>
        
        
        <category>随读</category>
        
      </item>
    
  </channel>
</rss>
