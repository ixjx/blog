<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeShurrik</title>
    <description>shurrik`s blog</description>
    <link>/blog/</link>
    <atom:link href="/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 08 Dec 2018 12:51:02 +0800</pubDate>
    <lastBuildDate>Sat, 08 Dec 2018 12:51:02 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>基于Docker+Jenkins+Gitlab搭建持续集成测试环境</title>
        <description>&lt;p&gt;　　七牛云的测试域名到期了，所有图片的图床都崩了，早知如此不该图方便，自己做静态资源算了。进入今天的正题，到新公司一个月，项目开发前后端分离，差不多拉通了开发到测试的流程，在此记录一下。&lt;/p&gt;

&lt;p&gt;　　随着DevOps理念和敏捷理念的发展，我们希望通过自动化技术，加快项目的迭代。尤其是当使用微服务方案后，面临在大量的项目构建和部署工作，借助于jenkins的持续集成，可以快速把应用打包成docker镜像，实现自动部署。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ixjx.github.io/blog/static/img/jenkins.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如图演示了以下的场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;开发者向自己的gitlab提交了代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jenkins通过定时任务检测到了代码有变成，执行自动化构建过程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;jenkins在自动化构建脚本中调用docker命令将构建好的镜像push到私有镜像中心harbor&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同时，jenkins也可以直接执行remote shell启动构建好的容器&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;构建失败或者成功，可以及时将结果推送给相关人员，比如测试人员，安排测试&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务端可以手动通过docker命令，从镜像仓库中心拉取镜像，进行手动部署&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;环境如下:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;192.168.110.202&lt;/td&gt;
      &lt;td&gt;harbor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;192.168.110.203&lt;/td&gt;
      &lt;td&gt;gitlab jenkins&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;　　除了jenkins均采用docker部署。&lt;/p&gt;

&lt;h2 id=&quot;1-搭建harbor&quot;&gt;1. 搭建harbor&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;docker run -d -p 5000:5000 -v /opt/docker-registry:/var/lib/registry registry&lt;/del&gt; 一开始用的registry，连个UI都没有，使用不便，弃了&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/goharbor/harbor/blob/master/docs/installation_guide.md&quot;&gt;harbor官方安装文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;采用offline安装包,在执行./prepare的时候抛出如下异常：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~/harbor# &lt;/span&gt;./prepare 
Fail to generate key file: ./common/config/ui/private_key.pem, cert file: ./common/config/registry/root.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;需要修改prepare文件，将第498行：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty_subj = &quot;/C=/ST=/L=/O=/CN=/&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;修改如下：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;empty_subj = &quot;/C=US/ST=California/L=Palo Alto/O=VMware, Inc./OU=Harbor/CN=notarysigner&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;配置daemon.json，去掉docker(每个docker client都需要配置)默认的https的访问&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /etc/docker/daemon.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;里面的内容是一个json对象,加上一项insecure-registries，地址自己更改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;insecure-registries&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.78&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后重启docker,执行&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl daemon-reload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl restart docker&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-搭建gitlab&quot;&gt;2. 搭建gitlab&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run --detach &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--hostname localhost &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--publish 443:443 --publish 80:80 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--name gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--restart always &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--volume /opt/gitlab/config:/etc/gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--volume /opt/gitlab/logs:/var/log/gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--volume /opt/gitlab/data:/var/opt/gitlab &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
gitlab/gitlab-ce:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　之后push demo代码。&lt;/p&gt;

&lt;h2 id=&quot;3-jenkins安装&quot;&gt;3. jenkins安装&lt;/h2&gt;

&lt;p&gt;　　这一块比较复杂，不讲了&lt;/p&gt;

&lt;h2 id=&quot;4-流水线demo&quot;&gt;4. 流水线demo&lt;/h2&gt;

&lt;p&gt;　　前端用npm打包，后端用的maven。&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'拉取代码'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;branch:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'alarm_system_v2'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;credentialsId:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5d7cb03e-66df-4002-a2d5-70f8aa196ac1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://192.168.110.8:10080/fehz/react-garden-system.git'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'安装依赖，进行前端代码鉴定'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'node-v10.6.0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                    npm -v
                    node -v
                    npm install react-tree-module-web --registry=http://192.168.110.26:8088/repository/npm/
                    npm install react-common-module-web --registry=http://192.168.110.26:8088/repository/npm/
                    npm install
                    npm run lint --force
                    '''&lt;/span&gt;

                    &lt;span class=&quot;n&quot;&gt;hygieiaCodeQualityPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;checkstyleFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'**/*/eslint.xml'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;findbugsFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;jacocoFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;junitFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;pmdFilePattern:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'npm打包'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'node-v10.6.0'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'InProgress'&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                    npm run build:test
                    cp /var/lib/jenkins/workspace/build_prj/*.js $WORKSPACE/node_modules/connect-cas2/lib/
                    '''&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'构建docker镜像'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                ###根据git库设置包名
                jar_name=192.168.110.202/isp/react-garden-alarm-system
                echo &quot;包名:$jar_name&quot;
                docker build -t $jar_name .
                '''&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'将docker镜像上传到镜像仓库'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker push 192.168.110.202/isp/react-garden-alarm-system:latest'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker image prune -f'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'测试环境部署'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                echo &quot;登录到192.168.110.211服务器执行部署脚本&quot;
                ssh root@192.168.110.211 &quot;sh /opt/jenkins/deploy.sh react_garden_alarm_system&quot;
                '''&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hygieiaDeployPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;applicationName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react-garden-system-alarm-dev'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactDirectory:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactGroup:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactVersion:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;environmentName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TEST'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'拉取代码'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;branch:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'develop-isp'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;credentialsId:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'5d7cb03e-66df-4002-a2d5-70f8aa196ac1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;url:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://192.168.110.8:10080/liuran/framework-alarm.git/'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'后端代码鉴定'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;job:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'garden-sonar-dev'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;parameters:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'choose_service'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'framework-alarm-log-sonar'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hygieiaSonarPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ceQueryIntervalInSeconds:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'10'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ceQueryMaxAttempts:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'30'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'构建并打包成docker镜像'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;withMaven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;jdk:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jdk'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;maven:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'apache-maven-3.5.4'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'InProgress'&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mvn clean package docker:build'&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;hygieiaBuildPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'将docker镜像上传到镜像仓库'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker push 192.168.110.202/isp/java/framework-alarm-log:latest'&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'docker image prune -f'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'测试环境部署'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sh&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'''
                echo &quot;登录到192.168.110.211服务器执行脚本&quot;
                ssh root@192.168.110.211 &quot;sh /opt/jenkins/deploy.sh java_framework_alarm_log&quot;
                echo &quot;登录到192.168.110.212部署自动化测试环境&quot;
                ssh root@192.168.110.212 &quot;sh /root/isp-alarm.sh&quot;
                '''&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;hygieiaDeployPublishStep&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;applicationName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'garden-framework-alarm-log-dev'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactDirectory:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'target'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactGroup:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'com.letv.dashboard'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'*.jar'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;artifactVersion:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;buildStatus:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Success'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;environmentName:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'TEST'&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/*post {
        always {
            
            echo 'One way or another, I have finished'
  
        }
        success {
            echo 'I succeeeded!'
			hygieiaBuildPublishStep buildStatus: 'Success'
        }
        unstable {
            echo 'I am unstable :/'
			hygieiaBuildPublishStep buildStatus: 'Unstable'
        }
        failure {
            echo 'I failed :('
			hygieiaBuildPublishStep buildStatus: 'Failure'
			
        }
        changed {
            echo 'Things were different before...'
        }
    }*/&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后面可以加个post阶段给老大发邮件。。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt;参考&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

login_harbor&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;HARBOR_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;HARBOR_PASSWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harbor12345&quot;&lt;/span&gt;

    docker login -u &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HARBOR_USER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HARBOR_PASSWD&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;REGISTRY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

deploy_new_container&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $1 : $CONTAINER_NAME&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $2 : $OLD_IMAGE_NAME &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $3 : $IMAGE_NAME &lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# $4 : $PORT &lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;cid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker ps -a | grep &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker rm -f &lt;span class=&quot;nv&quot;&gt;$cid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******删除旧容器完成******&quot;&lt;/span&gt;

    &lt;span class=&quot;nv&quot;&gt;iid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images | grep &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; | awk &lt;span class=&quot;s1&quot;&gt;'{print $3}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -n &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker rmi -f &lt;span class=&quot;nv&quot;&gt;$iid&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******删除旧镜像完成******&quot;&lt;/span&gt;

    docker pull &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******拉取新镜像完成******&quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker run -d --restart always -p &lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt; --name &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -e &lt;span class=&quot;nv&quot;&gt;JAVA_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-Denv=UAT&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******远程部署后端容器完成******&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;;&lt;span class=&quot;k&quot;&gt;then
        &lt;/span&gt;docker run -d --restart always -p &lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$4&lt;/span&gt; --name &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; -e &lt;span class=&quot;nv&quot;&gt;ENV_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--env test&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$3&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;******远程部署前端容器完成******&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else
        &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;镜像名字不合法，请确认!&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 后端微服务&lt;/span&gt;
java_framework_alarm_log&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java-alarm-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/framework-alarm-log&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/framework-alarm-log:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8086&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

java_isp_ias&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java-ias-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/isp-ias&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/java/isp-ias:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8089&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 前端&lt;/span&gt;
react_garden_alarm_system&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-alarm-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-alarm-system&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-alarm-system:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8003&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

react_garden_inbreak_system&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CONTAINER_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react-ias-test&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;OLD_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-inbreak-system&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.110.202/isp/react-garden-inbreak-system:latest&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8005&quot;&lt;/span&gt;

    deploy_new_container &lt;span class=&quot;nv&quot;&gt;$CONTAINER_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OLD_IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$IMAGE_NAME&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PORT&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

login_harbor

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in 
    &lt;/span&gt;java_framework_alarm_log&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        java_framework_alarm_log
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    java_isp_ias&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        java_isp_ias
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    react_garden_alarm_system&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        react_garden_alarm_system
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    react_garden_inbreak_system&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        react_garden_inbreak_system
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;请输入正确参数!
    java_framework_alarm_log
    java_isp_ias
    react_garden_alarm_system
    react_garden_inbreak_system&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;5-问题&quot;&gt;5. 问题&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;gitlab需通过root账号登录，允许本地webhook。这是因为gitlab和jenkins在同一个节点部署，实际分开部署不会有这个问题&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gitlab-rails console production   &lt;span class=&quot;c&quot;&gt;#gitlab居然是用ruby写的&lt;/span&gt;
u &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; User.where&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;email: &lt;span class=&quot;s1&quot;&gt;'admin@example.com'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.first
u.password&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'new_password'&lt;/span&gt;
u.save!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gitlab配置Admin area：&lt;/p&gt;

&lt;p&gt;Setting-&amp;gt;Network-&amp;gt;Outbound requests&lt;/p&gt;

&lt;p&gt;勾选Allow requests to the local network from hooks and services&lt;/p&gt;

&lt;p&gt;jenkins配置：&lt;/p&gt;

&lt;p&gt;Jenkins–&amp;gt;Jenkins Manages–&amp;gt;Configure System，找到GitLab配置，去掉勾选&lt;/p&gt;

&lt;p&gt;系统管理–&amp;gt;全局安全配置，勾选匿名用户具有可读权限和去掉CSRF防止跨站点请求伪造&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Nov 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-11-06/%E5%9F%BA%E4%BA%8EDocker+Jenkins+Gitlab%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">/blog/2018-11-06/%E5%9F%BA%E4%BA%8EDocker+Jenkins+Gitlab%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
        
        <category>容器</category>
        
        
        <category>随编</category>
        
      </item>
    
      <item>
        <title>美帝游记——1.准备</title>
        <description>&lt;p&gt;　　已经记不起因为什么想去美国度蜜月了，也许是因为American dream？其实老婆是想去希腊的，被我三言两语难民啊、地震啊、海啸啊劝退，这事就定下来了。我们讨论这种计划，基本上都能很快定下来。一方面，可能因为平时爱好和习惯，比较一致。另一方面也确实说明，我在家中的话语权，很有分量（咳咳……）。&lt;/p&gt;

&lt;p&gt;　　其实还是有几个原因的：一、去年去泰国跟团，体验极差，所以这次肯定是自由行，美国是公路上的国家，自驾游的理想目的地。二、加州1号公路声名远扬，无敌海景，还有优胜美地国家公园，Mac OS X系统以此命名的地方，景色不必多说。三、作为一个工程师，朝拜一下硅谷圣地。(四、原计划去尔湾的暴雪总部的，因为一些原因没有去成)&lt;/p&gt;

&lt;p&gt;　　另一个契机是准备离职，婚假不耍就没了，所以提前1个月去成都办了签证，在出行前4天收到护照（慌得要死）。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;下面开始正式的准备工作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一1个笔记本&quot;&gt;一、1个笔记本&lt;/h2&gt;

&lt;p&gt;　　如果你是认真策划一次美国自驾游的话，建议你用一个笔记本整理所有的信息。因为你会从很多地方得到很多信息，所以有一个地方来汇总是很重要的，我使用的有道云笔记。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-9-28/51777327.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;二购买机票确定行程&quot;&gt;二、购买机票，确定行程&lt;/h2&gt;

&lt;p&gt;　　我是直接在携程上买的机票，其实如果有时间可以下载各大航空公司的APP多比较下。我们为了保险，面签过了才定的机票，结果回来的机票从4400/两人涨到了6000，血的教训。去我们是定的国航，重庆出发北京中转然后到旧金山。回来是香港航空，洛杉矶出发香港中转最后到重庆。&lt;/p&gt;

&lt;p&gt;　　美国的自驾线路一般有两种选择，一个是贯穿东西的66号公路，在路上见识美国辽阔土地的多种风景，以及东西差异巨大的风俗文化。另一个是西部沿海的1号公路，从旧金山到洛杉矶，沿途一边是悬崖峭壁加上无尽的太平洋。&lt;/p&gt;

&lt;p&gt;　　由于时间关系，当然只有选择1号公路啦，同时感谢我老婆的同学帮我们准备了行程参考~~
　　
　　起点旧金山，终点洛杉矶，我请了婚假，整个行程是11天(其实有点赶，如果时间更充裕会更好)。&lt;/p&gt;

&lt;p&gt;　　因为我们考虑自驾出行，所以主要使用Google Maps来设定行程，比较自由，而且可以设定多个途经点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-9-28/71248273.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　在设定中途点时，我们先凭自己的喜好，列出一些想去的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;旧金山，想去唐人街，渔人码头，九曲花街，市政厅等等&lt;/li&gt;
  &lt;li&gt;硅谷，斯坦福&lt;/li&gt;
  &lt;li&gt;太浩湖（Tahoe Lake）&lt;/li&gt;
  &lt;li&gt;优胜美地国家公园（Yosemite National Park）&lt;/li&gt;
  &lt;li&gt;一号公路，大瑟尔（Big Sur），卡梅尔小镇，丹麦小镇，赫兹古堡&lt;/li&gt;
  &lt;li&gt;洛杉矶，好莱坞环球影城，购物&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　根据这些景点，我们一步一步调整行车路线，并确保每天的开车路程不超过4小时(然后现实是有一天开了8小时车…因为酒店位置定得有问题，这个后面再说)。&lt;/p&gt;

&lt;p&gt;　　大概计划是，在旧金山玩两天，然后开始自驾之旅，开车太浩湖和优胜美地，之后回旧金山南部，沿着西海岸一路向南，路过圣西米恩，圣芭芭拉，最后来到洛杉矶。时间有限，行程制定得比较简单，每天的具体计划并没有制定得太细致。&lt;/p&gt;

&lt;h2 id=&quot;三签证&quot;&gt;三、签证&lt;/h2&gt;

&lt;p&gt;　　美国旅行签证，最好提前几个月开始准备，第一步是在线申请&lt;a href=&quot;https://ceac.state.gov/GenNIV/Default.aspx&quot;&gt;DS160&lt;/a&gt;，预期花费1小时填写详尽的表格。&lt;/p&gt;

&lt;p&gt;　　虽然页面自带了翻译，但是有些页面不好用，所以还是要有一定英文能力，或者找个朋友在旁边帮忙看着。填写完成的最后，上传照片，并预约时间去成都面签。填表的过程中可以随时保存，得到一个自己的代码，下次可以从中断的地方恢复。&lt;/p&gt;

&lt;p&gt;　　因为申请旅行/签证（B1/B2）的时候，签证官是假设你有留在美国不回来的动机，所以你需要举证说明你肯定会回来的。比如你有在中国地房产、车、高收入的工作，你旅行有详细的计划、资金和伙伴等。所以我按照知乎还有百度上的问题准备了好多资料：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;身份证原件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;护照，签证面谈时有效期须在6个月以上&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;51*51mm方形签证照片一张（美国大使馆要求照片为最近六个月内拍摄的51毫米 x 51毫米,最小为600 x600像素的彩色数码照片,请用回形针别在护照上）&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DS160确认页&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;邀请函及行程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;预约信&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;户口簿原件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;个人工作收入证明&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;房产证原件（可选，，作为财力证明，一家人共同签证使用一本原件即可）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;银行存款证明 （可选，作为财力证明。存期3个月，存金20万左右，在签证面谈时仍在有效期即可）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机动车登记证原件（可选，作为财力证明）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;结婚证（可选，作为财力证明）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;　　除了10(实在没这么多钱)，其他资料都有准备。面签过程比想象中轻松太多，签证官是美国人，但是中文非常好，全程中文沟通。资料也完全没有看，包括打印的行程、机动车行驶证、结婚证……都没看。总体上，非常宽松。&lt;/p&gt;

&lt;p&gt;　　通过之后，把护照留下，选邮寄到家，过了两周收到护照，上面多了一页美国B1/B2签证，有效期10年，每次入境不超过6个月。下次如果续签的话就不需要亲自去成都了，网上办理续签即可。&lt;/p&gt;

&lt;h2 id=&quot;四租车&quot;&gt;四、租车&lt;/h2&gt;

&lt;p&gt;　　第一次飞出亚洲，心情很激动，而且还是去开车，就尤其紧张。首先要准备的是驾照，根据不同的目的地和不同的州法律，有些地方认可中国驾照，有些地方不认可。美国的大部分州是认的，但是为了保险起见我还是在网上免费办了一个驾照翻译件。当然这次旅途这个翻译件全程没有用到。&lt;/p&gt;

&lt;p&gt;　　然后是租车,我还是选择的携程(其他APP懒得再填一遍资料了)，携程只是一个平台，你可以选具体的租车公司，我选的是alamo，因为价格便宜，保险齐全，同时也免异地还车费。实时证明如此，我们到机场租车大厅的时候其他柜台三两只人，只有alamo柜台排着长龙…不过咨询了工作人员后可以选择在自助机器上自助取车，非常方便。还车也很方便，工作人员扫一下挡风玻璃前贴的条码，打个单子就完事，当时我还想问It&lt;code class=&quot;highlighter-rouge&quot;&gt;s OK? 工作人员直接回复：finished,it&lt;/code&gt;s done!&lt;/p&gt;

&lt;p&gt;　　租车的界面很简单，选择起点和终点之后，系统会列出可选的车型和价格，以及取还条件。这里注意几点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;价格经常会浮动，有时候中午和下午的价格都不一样。说不清楚为什么，建议可以多关注一段时间看看，找个相对低的价格时候买入。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一般是选择车型组，而不是具体车型。比如可以选择（迷你型轿车 经济型轿车 紧凑型轿车 中等型轿车 中大型轿车 大型轿车 豪华型轿车 高级轿车 商务车 SUV 敞篷车 旅行车 皮卡 跑车 特殊车型 跨界车）这些车型组。我选择的是中大型轿车（full size），因为价格只比紧凑型贵一丢丢，但实际上我取到的是一台NISSAN，美版楼兰。两个人用超级大，配置也齐全，舒服。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;租满一周以上会比较便宜，一周内均价很贵。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于油。有些是送一桶油（多给一点钱），有的需要满油取还。最好是满油取还，因为你还车的时候不一定能正好空油还。同时在美国加油不能刷国内信用卡，我是用的现金，这个后面详细说。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于保险（insurance），租车自带的基本保险，是关于车的（碰撞险，盗窃险，第三责任险），但还有一些人身安全的保险，是可选的。租车公司自带的保险比较贵，建议在国内买境外保险。拿着预定单，在当地柜台确认的时候，注意听到insurance这个词的时候，提高警惕，说不需要，自己已经买了保险就好了。如果英语实在不好不用逞强，可以问问他们有没有Chinese工作人员。这一点就有几千的费用，确认清楚比较好。也可以拿到预算消费单的时候，仔细检查下。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关于还车，取车时间不是按你拿到钥匙的时间，而是按你出租车公司停车场的时间算，所以注意还车时间，不要超了就好。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;五装备&quot;&gt;五、装备&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;拍照设备（三脚架、自拍杆）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPS（淘宝租，备用！西部某些国家公园和1号公路一段没有手机信号就没法用Google地图了），我是在淘宝租了的，1天9块钱。不过全程没用上，在此推荐一个离线地图APP &lt;strong&gt;“探途”&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;电话卡（淘宝买）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;出风口手机支架，点烟器USB接口（开车用）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于行李箱和背包的详细估算（我们是两个箱子过去，三个箱子回来）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;墨镜（一定需要！如果近视眼可以用一个夹片，因为加州阳光太热烈）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服装少带一点，去了美国outlets觉得简直是购物天堂&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一张或多张额度够大的全币信用卡，避免换算人民币的手续费（推荐招行全币信用卡，还有返现活动，优胜美地国家公园门票35刀，反了30，美滋滋）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;六酒店&quot;&gt;六、酒店&lt;/h2&gt;

&lt;p&gt;　　其实我非常想全程使用Airbnb，不过老婆觉得不安全，所以我们提前了半个月用booking定的酒店，选的可以免费退订的那种（最神奇的是在途中我发现有两家酒店在入住之前预定更便宜！所以我就退了重订，节约了1000大洋~~）&lt;/p&gt;

&lt;h2 id=&quot;七预算花费&quot;&gt;七、预算花费&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;签证花费（算上去成都的住宿路费）：3000&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;机票 4786+5962 = 10748（略贵）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;租车：1935&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;保险：370&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;电话卡：169+155 = 324&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPS租金：135&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;酒店：10131&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;500刀现金：500*6.85 = 3425&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;购物：10000&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;杂七杂八花费：……&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;共计: 花了4W多，如果不买东西的话，其实全程花费不算贵。&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Sep 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-09-28/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-1.%E5%87%86%E5%A4%87/</link>
        <guid isPermaLink="true">/blog/2018-09-28/%E7%BE%8E%E5%B8%9D%E6%B8%B8%E8%AE%B0-1.%E5%87%86%E5%A4%87/</guid>
        
        <category>游记</category>
        
        
        <category>随行</category>
        
      </item>
    
      <item>
        <title>深入理解装饰器</title>
        <description>&lt;p&gt;　　等offer等得心慌，写写之前面试遇到的坑吧。&lt;/p&gt;

&lt;p&gt;　　面试官：看你简历写了熟悉python？&lt;/p&gt;

&lt;p&gt;　　我：…会一点,shell脚本写得比较多&lt;/p&gt;

&lt;p&gt;　　面试官：那你给我讲讲装饰器吧&lt;/p&gt;

&lt;p&gt;　　我：…呵呵&lt;/p&gt;

&lt;p&gt;　　之前只是了解python的函数式编程，大概知道装饰器(decorator)是在代码运行期间动态增加功能同时又不改变原有代码。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt; 函数+返回值高阶函数+实参高阶函数+嵌套函数+语法糖 = 装饰器 &amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　你能看懂吗？反正我是没看懂，所以一个一个的查了后才略有理解：装饰器本质上还是函数。&lt;/p&gt;

&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;

&lt;p&gt;　　理解装饰器前，需要明白函数的工作原理，我们先从一个最简单函数定义开始：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　上面定义了一个函数，名字叫foo，也可以把 foo 可理解为变量名，该变量指向一个函数对象&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-8-24/81273610.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　调用函数只需要给函数名加上括号并传递必要的参数（如果函数定义的时候有参数的话）&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　变量名 foo 现在指向 &amp;lt;function foo at 0x1030060c8&amp;gt; 函数对象，但它也可以指向另外一个函数&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# bar()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-8-24/26546525.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;返回值高阶函数&quot;&gt;返回值高阶函数&lt;/h2&gt;

&lt;p&gt;在Python中，一切皆为对象，函数也不例外，它可以像整数一样作为其它函数的返回值，例如：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# &amp;lt;function foo at 0x10a2f4140&amp;gt;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1 &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 等价于&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　调用函数 bar() 的返回值是一个函数对象 &amp;lt;function foo at 0x10a2f4140&amp;gt;，因为返回值是函数，所以我们可以继续对返回值进行调用（记住：调用函数就是在函数名后面加()）调用bar()()相当于调用 foo()，因为 变量 foo 指向的对象与 bar() 的返回值是同一个对象。&lt;/p&gt;

&lt;h2 id=&quot;实参高阶函数&quot;&gt;实参高阶函数&lt;/h2&gt;

&lt;p&gt;　　函数还可以像整数一样作为函数的参数，例如：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　函数 bar 接收一个参数，这个参数是一个可被调用的函数对象，把函数 foo 传递到 bar 中去时，foo 和 fun 两个变量名指向的都是同一个函数对象，所以调用 fun(3) 相当于调用 foo(3)。&lt;/p&gt;

&lt;h2 id=&quot;嵌套函数&quot;&gt;嵌套函数&lt;/h2&gt;

&lt;p&gt;　　函数不仅可以作为参数和返回值，函数还可以定义在另一个函数中，作为嵌套函数存在，例如：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　inner做为嵌套函数，它可以访问外部函数的变量，调用 outer 函数时，发生了3件事：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;给变量 x 赋值为1&lt;/li&gt;
  &lt;li&gt;定义嵌套函数 inner，此时并不会执行 inner 中的代码，因为该函数还没被调用，直到第3步&lt;/li&gt;
  &lt;li&gt;调用 inner 函数，执行 inner 中的代码逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;闭包&quot;&gt;闭包&lt;/h2&gt;

&lt;p&gt;　　再来看一个例子：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;closure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;　　同样是嵌套函数，只是稍改动一下，把局部变量 x 作为参数了传递进来，嵌套函数不再直接在函数里被调用，而是作为返回值返回，这里的 closure就是一个闭包，本质上它还是函数，闭包是引用了自由变量(x)的函数(inner)。&lt;/p&gt;

&lt;h2 id=&quot;装饰器&quot;&gt;装饰器&lt;/h2&gt;

&lt;p&gt;　　终于到正题了：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　上面这个函数虽然没什么用，但是能说明问题就行。现在，有一个新的需求，需要在执行该函数时加上日志：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志开始&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志结束&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　功能实现，唯一的问题就是它需要侵入到原来的代码里面，把日志逻辑加上去，如果还有好几十个这样的函数要加日志，也必须这样做，显然，这样的代码一点都不Cooooooool。那么有没有可能在不修改业务代码的提前下，实现日志功能呢？答案就是装饰器。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志开始&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 业务函数&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;记录日志结束&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　我没有修改 foo 函数里面的任何逻辑，只是给 foo 变量重新赋值了，指向了一个新的函数对象。最后调用 foo()，不仅能打印日志，业务逻辑也执行完了。现在来分析一下它的执行流程。&lt;/p&gt;

&lt;p&gt;　　这里的 outer 函数其实就是一个装饰器，装饰器是一个带有函数作为参数并返回一个新函数的闭包，本质上装饰器也是函数。outer 函数的返回值是 inner 函数，在 inner 函数中，除了执行日志操作，还有业务代码，该函数重新赋值给 foo 变量后，调用 foo() 就相当于调用 inner()&lt;/p&gt;

&lt;p&gt;　　另外，python为装饰器提供了语法糖@，它用在函数的定义处：这样就省去了手动给foo重新赋值的步骤。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@outer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#即 @outer 等价于 foo = outer(foo)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　当然，实际使用的装饰器更加复杂，比如可以接受参数的装饰器，基于类的装饰器等等，慢慢学吧&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Aug 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-08-24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
        <guid isPermaLink="true">/blog/2018-08-24/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
        
        <category>python</category>
        
        
        <category>随编</category>
        
      </item>
    
      <item>
        <title>ELK Docker image中文文档</title>
        <description>&lt;p&gt;　　又有两个月没写东西了，主要是最近在看&lt;a href=&quot;https://hub.docker.com/r/sebp/elk/&quot;&gt;ELK&lt;/a&gt;，网上资料一大堆（大多数都是过时的），我发现还是看英文文档比较舒服。&lt;/p&gt;

&lt;p&gt;　　同时为了锻炼一下自己毕业后就没怎么提升的英语水平，免得提Issue时都表达不清楚自己的意思，毕竟还想着去美帝自由行呢，几句Hello I`m fine Thank you 还是要会的吧。脑子一热就决定翻译&lt;a href=&quot;http://elk-docker.readthedocs.io/&quot;&gt;这个文档&lt;/a&gt;，当然翻译过程中没少用翻译软件…&lt;/p&gt;

&lt;p&gt;　　看的时候没觉得什么，真翻译起来才觉得头大，有时明明知道是什么意思，但就是没法很好的用中文表达出来，有些技术上的名词用英文原文比较好，有时候翻译出来又改了回去，所以花了不少时间才做完。&lt;/p&gt;

&lt;p&gt;　　尝试了&lt;a href=&quot;https://www.gitbook.com&quot;&gt;gitbook&lt;/a&gt;写作，写好 &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;SUMMARY.md&lt;/code&gt; ，再 &lt;code class=&quot;highlighter-rouge&quot;&gt;gitbook init&lt;/code&gt; 就生成了大纲，然后上传到&lt;a href=&quot;https://github.com/ixjx/docker-elk-doc&quot;&gt;github repo&lt;/a&gt;，然后再和&lt;a href=&quot;https://ixjx.gitbooks.io/docker-elk-doc&quot;&gt;gitbooks.com&lt;/a&gt;关联一下就自动生成了文档，确实方便。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-7-10/46528275.jpg&quot; alt=&quot;这是原文&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/18-7-11/77399485.jpg&quot; alt=&quot;这是译文&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-07-10/ELK-Docker-image%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</link>
        <guid isPermaLink="true">/blog/2018-07-10/ELK-Docker-image%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/</guid>
        
        <category>容器</category>
        
        
        <category>随读</category>
        
      </item>
    
      <item>
        <title>碎碎念</title>
        <description>&lt;p&gt;　　今天突然意识到，blog的更新频率跟自己的心情是息息相关的——当心情低落抑郁时，就会在这里多记录点心声，散发些负能量；而当生活平静祥和时，则会销声匿迹，夹起尾巴做人，所谓闷声发大财。&lt;/p&gt;

&lt;p&gt;　　最近忙完婚礼这件人生大事，闲下来准备写点东西，结果发现好多gem依赖过期了。。
  &lt;img src=&quot;http://shurriklab.qiniudn.com/em490f2vxyc4bezkpcuxfdj0b2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　忙活半天安装更新gem依赖，修了几个siteurl和baseurl的bug，写作的思路已经飘到九霄云外了。。&lt;/p&gt;

&lt;p&gt;　　之前我在学微信小程序写游戏时也有这种感觉。&lt;/p&gt;

&lt;p&gt;　　某天突然心血来潮想写个小游戏玩玩，然后发现微信小程序又更新了好几个版本，加了好多内容。等我更新完 SDK，看过更新的内容之后，写游戏这件事本身却被抛在了脑后。等哪天突然又想起来，发现 SDK 又更新了，周而复始。我学习的速度，已经赶不上微信小程序引擎更新的速度了。&lt;/p&gt;

&lt;p&gt;　　去年我在 Github 上的代码提交次数只有80 几次，可以忽略不计了。
  &lt;img src=&quot;http://shurriklab.qiniudn.com/nfhcyx6pny1ramw3hdn8to0cc8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　这里还要提下Docker，从我最早使用时的 1.8 版本，到现在已经到了 18.XX 版本，连版本号结构都变了。开源社区的项目就像一个大轮子，单位时间内虽然不是速度最快，但是不断有人参与进来推动轮子前进，不知不觉之间，已经前进了很多很多。新版本不断在改进完善，旧的过时功能不断被修正和删除，以至于之前我练手写的几个镜像被迫进行了几次升级，以支持新版的 Docker。&lt;/p&gt;

&lt;p&gt;　　所以，我的一个感悟是，这个世界正在以你难以想象的速度在向前发展，不管你看得见还是看不见。所以你一定要保持前进，不然等你回过神来，会发现已经被远远的抛在后面。前进是很困难的，只有努力，才能保持原地不动。&lt;/p&gt;
</description>
        <pubDate>Tue, 15 May 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-05-15/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link>
        <guid isPermaLink="true">/blog/2018-05-15/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid>
        
        <category>负能量</category>
        
        
        <category>水</category>
        
      </item>
    
      <item>
        <title>干掉Linux Firefox的Title bar</title>
        <description>&lt;p&gt;　　最近开始使用Firefox，我相信用惯了Chrome/360急速的人看着最上面标签条十分辣眼睛，找了个插件&lt;a href=&quot;https://addons.mozilla.org/zh-CN/firefox/user/nanpuyue/&quot;&gt;https://addons.mozilla.org/zh-CN/firefox/user/nanpuyue/&lt;/a&gt;需要安装一个脚本，然而我这里的网络打不开gist。。。不过另外３个插件最小化最大化和关闭键倒是用上了&lt;/p&gt;

&lt;p&gt;　　参考了&lt;a href=&quot;http://eleveni386.7axu.com/blog/post/admin/Linux%E7%94%A8%E6%88%B7%E5%8E%BB%E6%8E%89Firefox-57-%E8%AE%A8%E5%8E%8C%E7%9A%84Title-bar&quot;&gt;http://eleveni386.7axu.com/blog/post/admin/Linux%E7%94%A8%E6%88%B7%E5%8E%BB%E6%8E%89Firefox-57-%E8%AE%A8%E5%8E%8C%E7%9A%84Title-bar&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;　思路&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　利用wmctrl找到窗口ID , 使用GDK得到该窗口句柄, 并操作窗口. 去掉窗口装饰器(外边框)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;准备工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　需要wmctrl, 以及pygtk包&lt;/p&gt;

&lt;p&gt;　　这两个需要自行安装, 一般发行版本 不自带&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;操作步骤&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;重命名firefox
&lt;code class=&quot;highlighter-rouge&quot;&gt;mv /usr/lib/firefox/firefox /usr/lib/firefox/firefox-browser&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;创建同名脚本vi firefox
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
/usr/lib/firefox/firefox-browser &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &amp;amp;
sleep 2
&lt;span class=&quot;nv&quot;&gt;F_W_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;wmctrl -l |grep &lt;span class=&quot;s1&quot;&gt;'Firefox'&lt;/span&gt;|awk &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;;
python -c &lt;span class=&quot;s1&quot;&gt;'from gtk.gdk import window_foreign_new, window_process_all_updates; w = window_foreign_new(int(&quot;'&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$F_W_ID&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;, 16)); w.set_decorations(0); window_process_all_updates()'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;给予执行权限
&lt;code class=&quot;highlighter-rouge&quot;&gt;chomd 777 firefox&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;完毕, 截图
&lt;img src=&quot;http://shurriklab.qiniudn.com/20180326170147.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 26 Mar 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-03-26/%E5%B9%B2%E6%8E%89Linux-Firefox%E7%9A%84Title-bar/</link>
        <guid isPermaLink="true">/blog/2018-03-26/%E5%B9%B2%E6%8E%89Linux-Firefox%E7%9A%84Title-bar/</guid>
        
        <category>Linux</category>
        
        
        <category>Linux</category>
        
      </item>
    
      <item>
        <title>制作网站docker镜像</title>
        <description>&lt;p&gt;　　看docker官方文档的时候，官网总被墙，怎么办呢？&lt;/p&gt;

&lt;p&gt;　　首先 &lt;em&gt;感谢&lt;/em&gt; 伟大的墙及其先祖。&lt;/p&gt;

&lt;p&gt;　　然后，我们可以本地运行 Docker 官方文档的网站，以 docker 的方式：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -d -p 80:4000 docs/docker.github.io&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　这样访问docker宿主机的 80 端口，如&lt;a href=&quot;http://localhost&quot;&gt;http://localhost&lt;/a&gt;，就会看到官网文档了。&lt;/p&gt;

&lt;p&gt;　　最近有朋友说我的blog被墙了打不开，我大惊，定睛一看发现是github pages改成了https，也就是说网址要改成&lt;a href=&quot;https://ixjx.github.io/blog&quot;&gt;https://ixjx.github.io/blog&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;　　想到同样可以用docker的方式来本地运行网站，说干就干。依然是利用docker cloud的automated build，在blog的github里写Dockerfile，Dockerfile很简单，一共就5行~~&lt;/p&gt;

&lt;p&gt;　　因为使用了caddy作为web服务器，同时还要写一个Caddyfile。&lt;/p&gt;

&lt;p&gt;　　然后就可以通过:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ docker run -d -p 80:80 ixjx/ixjx.github.io&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　然后就可以访问本地 80 端口看到最新的blog了 &lt;del&gt;说得好像有人看一样&lt;/del&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-03-01/%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99docker%E9%95%9C%E5%83%8F/</link>
        <guid isPermaLink="true">/blog/2018-03-01/%E5%88%B6%E4%BD%9C%E7%BD%91%E7%AB%99docker%E9%95%9C%E5%83%8F/</guid>
        
        <category>容器</category>
        
        
        <category>网络</category>
        
      </item>
    
      <item>
        <title>使用docker科学上网</title>
        <description>&lt;p&gt;　　之前写过一篇&lt;a href=&quot;http://ixjx.github.io/blog/2015-06-05/%E7%A7%91%E5%AD%A6%E5%A7%BF%E5%8A%BF%E4%B8%8Agoogle%E6%8C%87%E5%8C%97/&quot;&gt;科学上网指北&lt;/a&gt;，学习使用docker后配合食用更佳~&lt;/p&gt;

&lt;p&gt;　　首先当然是要安装好docker，这里不细说。其实也没什么好扯的，直接上科学上网方法吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;PPTP&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　自己写的一个PPTP的镜像，VPS里直接执行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --privileged --net=host ixjx/vpn
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;就可以食用。&lt;/p&gt;

&lt;p&gt;　　在github上写&lt;a href=&quot;https://github.com/ixjx/docker-vpn&quot;&gt;Dockerfile&lt;/a&gt;，在docker hub上关联github帐号就可以直接生成镜像，这一点docker支持做得不错。&lt;/p&gt;

&lt;p&gt;　　这样你的pptp vpn就设置好了，默认用户名密码是username/password。接下来就在自己的客户端上连接吧。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;L2TP/IPSec&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　之前iOS和MacOS升级，导致PPTP VPN已经不能使用了，需要用L2TP/IPSec来代替：&lt;/p&gt;

&lt;p&gt;　　先把Docker容器拉下来：&lt;/p&gt;

&lt;p&gt;　　&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull hwdsl2/ipsec-vpn-server&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;　　然后创建vpn.env文件，在文件中写入：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VPN_IPSEC_PSK=&amp;lt;IPsec pre-shared key&amp;gt;
VPN_USER=&amp;lt;VPN Username&amp;gt;
VPN_PASSWORD=&amp;lt;VPN Password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　上面的内容分别是秘钥，用户名，密码，随便设置，到时候填入客户端的时候填同样的值就行了。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo modprobe af_key
docker run \
    --name ipsec-vpn-server \
    --env-file ./vpn.env \
    -p 500:500/udp \
    -p 4500:4500/udp \
    -v /lib/modules:/lib/modules:ro \
    -d --privileged \
    --restart=always \
    hwdsl2/ipsec-vpn-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Shadowsocks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　大名鼎鼎的SS。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -p 1984:1984 oddrationale/docker-shadowsocks -s 0.0.0.0 -p 1984 -k PASSWORD -m aes-256-cfb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;　　只需要把上面的PASSWORD换成你自己的密码就可以了，注意，上面创建的shadowsocks端口为1984， 加密方式为aes-256-cfb，在客户端设置时要设置成相同的值。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jan 2018 00:00:00 +0800</pubDate>
        <link>/blog/2018-01-16/%E4%BD%BF%E7%94%A8docker%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</link>
        <guid isPermaLink="true">/blog/2018-01-16/%E4%BD%BF%E7%94%A8docker%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</guid>
        
        <category>翻墙</category>
        
        
        <category>网络</category>
        
      </item>
    
      <item>
        <title>2017年终总结</title>
        <description>&lt;p&gt;　　”年”只是我们划分人生的一种刻度，所以无须到年底，才知道自己这一年过得怎么样。但仪式感还是要有的，不是写给别人看，而是给自己，习惯了每到年底都做一个总结，似乎不写下什么就没有跟年初的自己握手言和。现在看前几年的年终总结，能看到成长的痕迹，感觉很有趣。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ixjx.github.io/blog/2014-01-14/2013%E8%83%A1%E4%B9%B1%E6%80%BB%E7%BB%93/&quot;&gt;2013胡乱总结&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ixjx.github.io/blog/2014-12-30/2014%E5%B8%9D%E9%83%BD%E6%B8%B8/&quot;&gt;2014帝都游&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ixjx.github.io/blog/2015-12-19/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/&quot;&gt;2015年终总结&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://ixjx.github.io/blog/2016-12-21/%E5%8A%A0%E9%80%9F%E4%B8%96%E7%95%8C/&quot;&gt;加速世界（2016年终总结）&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;就像我的about里写的一样:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;主要用途是记录自己的生活和与之相关的一些心得体会，转载一些技术文章，然后到若干年后自己回顾一下，看看当时的自己是多么幼稚，仅此而已。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　年轻的时候很容易做出突破性的成就，年纪大一点也许就是在之前的基础上去迭代。不要不服，25岁能第一次结婚，30岁最多只能生个娃。25岁能买第一套房，30岁只能换更大的房。25岁能买第一辆车，30岁最多换个路虎……我的意思是，无法获得质的提升。&lt;/p&gt;

&lt;p&gt;　　但有量的提升已经很好，我们不能像小时候一样横冲直撞，妄想在所有的方向上有所成就。
　　&lt;/p&gt;

&lt;p&gt;　　26岁的自己，虽然没有做出惊天动地的事情，但我知道他在努力变得比25岁的自己更好。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;今年2月份去了三亚，10月去了山西，11月还去了普吉。普吉因为是跟团游，比较坑爹，前两天玩玩玩，剩下的就是带你去购物消费，体验很糟糕。以后能自由行还是自由行吧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;7月份到了新的部门，目前负责了一个WIFI解决方案项目（也许现在才能叫”负责”这个词，之前用”支持”更准确），后续的优化，需要考虑和完善的工作还有很多。Stay hungry, Stay foolish.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关注了一个&lt;a href=&quot;http://www.cnblogs.com/CloudMan6/p/5224114.html&quot;&gt;每天5分钟的系列教程&lt;/a&gt;。也可以在微信公众号上看，比较方便。当然5分钟是指看一遍当天内容的时间，若要通过实践真正理解和掌握，5分钟远远不够，希望能坚持下去。
&lt;img src=&quot;http://shurriklab.qiniudn.com/rsbv9iwvy2lw6o3p51av7pg5jy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;blockquote&gt;
      &lt;p&gt;这些年我一直提醒自己一件事情，千万不要自己感动自己。大部分人看似的努力，不过是愚蠢导致的。什么熬夜加班到天亮，连续几天只睡几小时，多久没放假了，如果这些东西也值得夸耀，那么富土康流水线上任何一个人都比你努力多了。人难免天生有自怜的情绪，唯有时刻保持清醒，才能看清真正的价值在哪里。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;最后，马上就要持证上岗了^_^，时间过得真快，以前下班了坐地铁过去陪她走回家，现在坐我的副驾一起回家，我想，以后无论发生什么，我们也能一路走下去吧。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 06 Dec 2017 00:00:00 +0800</pubDate>
        <link>/blog/2017-12-06/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">/blog/2017-12-06/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid>
        
        <category>年终总结</category>
        
        
        <category>水</category>
        
      </item>
    
      <item>
        <title>动手实践Linux VLAN-每天5分钟的OpenStack(13)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#配置-vlan&quot; id=&quot;markdown-toc-配置-vlan&quot;&gt;配置 VLAN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#配置-vm1&quot; id=&quot;markdown-toc-配置-vm1&quot;&gt;配置 VM1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#配置vm2&quot; id=&quot;markdown-toc-配置vm2&quot;&gt;配置VM2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#验证-vlan-的隔离性&quot; id=&quot;markdown-toc-验证-vlan-的隔离性&quot;&gt;验证 VLAN 的隔离性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/lwev186yhy5sif09q7cikg7hqi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本节我们来看如何在实验环境中实施和配置如下 VLAN 网络&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/c2whl6a6g7nfjgqov1b5uqln5e.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;配置-vlan&quot;&gt;配置 VLAN&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;编辑 /etc/network/interfaces，配置 eth0.10、brvlan10、eth0.20 和 brvlan20。&lt;/p&gt;

&lt;p&gt;下面用 vmdiff 展示了对 /etc/network/interfaces 的修改&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/iydr52hykap83a27ze458gxw53.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;重启宿主机网络，ifconfig 各个网络接口&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/62wq3giwpztwqc2umaylv0b6xy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;用 brctl show 查看当前 Linux Bridge 的配置。&lt;/p&gt;

&lt;p&gt;eth0.10 和 eth0.20 分别挂在 brvlan10 和 brvlan20上了&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/kklzr79otpvz3gknejfuwi3rz4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在宿主机中已经提前创建好了虚机 VM1 和 VM2，现在都处于关机状态&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;配置-vm1&quot;&gt;配置 VM1&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;在 virt-manager 中将 VM1 的虚拟网卡挂到 brvlan10 上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/oinakjnekfls1dldpus6ryxf20.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;启动 VM1&lt;/p&gt;

&lt;p&gt;查看 Bridge，发现 brvlan10 已经连接了一个 vnet0 设备&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/7gdg4qcde9g4xpanztw4738up7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 virsh 确认这就是 VM1 的虚拟网卡。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://shurriklab.qiniudn.com/5atvxy96wlakmscboiiwyndrc0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;配置vm2&quot;&gt;配置VM2&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;类似的，将 VM2 的网卡挂在 brvlan20 上&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;验证-vlan-的隔离性&quot;&gt;验证 VLAN 的隔离性&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ping 测试结果： VM1 与 VM2 是不通的&lt;/p&gt;

&lt;p&gt;原因如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;VM2 向 VM1 发 Ping 包之前，需要知道 VM1 的 IP 192.168.100.10 所对应的 MAC 地址。VM2 会在网络上广播 ARP 包，其作用就是问 “谁知道 192.168.100.10 的 MAC 地址是多少？”&lt;/li&gt;
  &lt;li&gt;ARP 是二层协议，VLAN 的隔离作用使得 ARP 只能在 VLAN20 范围内广播，只有 brvlan20 和 eth0.20 能收到，VLAN10 里的设备是收不到的。VM1 无法应答 VM2 发出的ARP包。&lt;/li&gt;
  &lt;li&gt;VM2 拿不到 VM1 vnet0 的 MAC 地址，也就 Ping 不到 VM1。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Linux Bridge + VLAN = 虚拟交换机&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在对 KVM 的网络虚拟化做个总结：&lt;/p&gt;

&lt;p&gt;物理交换机存在多个 VLAN，每个 VLAN 拥有多个端口。&lt;/p&gt;

&lt;p&gt;同一 VLAN 端口之间可以交换转发，不同 VLAN 端口之间隔离。&lt;/p&gt;

&lt;p&gt;所以交换机其包含两层功能：交换与隔离。&lt;/p&gt;

&lt;p&gt;Linux 的 VLAN 设备实现的是隔离功能，但没有交换功能。&lt;/p&gt;

&lt;p&gt;一个 VLAN 母设备（比如 eth0）不能拥有两个相同 ID 的 VLAN 子设备，因此也就不可能出现数据交换情况。&lt;/p&gt;

&lt;p&gt;Linux Bridge 专门实现交换功能。&lt;/p&gt;

&lt;p&gt;将同一 VLAN 的子设备都挂载到一个 Bridge 上，设备之间就可以交换数据了。&lt;/p&gt;

&lt;p&gt;总结起来，Linux Bridge 加 VLAN 在功能层面完整模拟现实世界里的二层交换机。&lt;/p&gt;

&lt;p&gt;eth0 相当于虚拟交换机上的 trunk 口，允许 vlan10 和 vlan20 的数据通过&lt;/p&gt;

&lt;p&gt;eth0.10，vent0 和 brvlan10 都可以看着 vlan10 的 access 口&lt;/p&gt;

&lt;p&gt;eth0.20，vent1 和 brvlan20 都可以看着 vlan20 的 access 口&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Nov 2017 00:00:00 +0800</pubDate>
        <link>/blog/2017-11-08/%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5Linux-VLAN-%E6%AF%8F%E5%A4%A95%E5%88%86%E9%92%9F%E7%9A%84OpenStack(13)/</link>
        <guid isPermaLink="true">/blog/2017-11-08/%E5%8A%A8%E6%89%8B%E5%AE%9E%E8%B7%B5Linux-VLAN-%E6%AF%8F%E5%A4%A95%E5%88%86%E9%92%9F%E7%9A%84OpenStack(13)/</guid>
        
        <category>虚拟化</category>
        
        
        <category>Linux</category>
        
      </item>
    
  </channel>
</rss>
